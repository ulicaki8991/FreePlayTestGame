["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008, 0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009, 0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032, 0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006, -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004, 0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n    u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008, 0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009, 0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032, 0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006, -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004, 0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n    u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAr;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAg;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAb;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBr;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBg;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBb;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) * vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n        u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 + (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28 = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n        u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump float vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) * vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n        u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 + (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28 = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n        u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nin mediump float vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) * vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n        u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 + (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28 = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n        u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) * vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n        u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 + (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28 = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n        u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nin mediump vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat22;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat28 = min(u_xlat4.y, -0.00100000005);\n        u_xlat28 = -9.99999975e-05 / u_xlat28;\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat6.w = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat6.xy = (-u_xlat6.xw) + vec2(1.0, 1.0);\n        u_xlat22 = u_xlat6.y * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 3.82999992;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 0.458999991;\n        u_xlat14.x = u_xlat6.y * u_xlat22 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat6.y = exp2(u_xlat14.x);\n        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;\n        u_xlat6.xyz = u_xlat6.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat6.x = u_xlat6.x * 0.25 + u_xlat6.y;\n        u_xlat14.xz = vec2(u_xlat28) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat14.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = sqrt(u_xlat28);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = u_xlat28 * u_xlat6.x + (-u_xlat6.z);\n        u_xlat6.x = max(u_xlat6.x, 0.0);\n        u_xlat6.x = min(u_xlat6.x, 50.0);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-u_xlat6.xxx) * u_xlat7.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xyz);\n        u_xlat28 = u_xlat14.z * u_xlat28;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat28);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat6.xyz * u_xlat7.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(15.0, 15.0, 15.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout highp vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat22;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 = (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29 = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28 * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24 * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n        u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz * u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat28 = min(u_xlat4.y, -0.00100000005);\n        u_xlat28 = -9.99999975e-05 / u_xlat28;\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat6.w = dot((-u_xlat4.xyz), u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n        u_xlat6.xy = (-u_xlat6.xw) + vec2(1.0, 1.0);\n        u_xlat22 = u_xlat6.y * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 3.82999992;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 0.458999991;\n        u_xlat14.x = u_xlat6.y * u_xlat22 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat6.y = exp2(u_xlat14.x);\n        u_xlat22 = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 3.82999992;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;\n        u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;\n        u_xlat6.xyz = u_xlat6.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat6.x = u_xlat6.x * 0.25 + u_xlat6.y;\n        u_xlat14.xz = vec2(u_xlat28) * vec2(0.5, 20.0);\n        u_xlat7.xyz = u_xlat4.xyz * u_xlat14.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat28 = sqrt(u_xlat28);\n        u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = u_xlat28 * u_xlat6.x + (-u_xlat6.z);\n        u_xlat6.x = max(u_xlat6.x, 0.0);\n        u_xlat6.x = min(u_xlat6.x, 50.0);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-u_xlat6.xxx) * u_xlat7.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xyz);\n        u_xlat28 = u_xlat14.z * u_xlat28;\n        u_xlat6.xyz = u_xlat0.xyz * vec3(u_xlat28);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz = u_xlat6.xyz * u_xlat7.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(15.0, 15.0, 15.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nin highp vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute highp vec3 in_POSITION0;\nvarying mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = _Color;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nvarying mediump vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nin highp vec3 in_POSITION0;\nout mediump vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = _Color;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nin mediump vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat10_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat4.x * u_xlat4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_30 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat4.x * u_xlat4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_30 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec2 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat9;\nfloat u_xlat11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb3 = u_xlati_loop_1>=u_xlati18;\n        if(u_xlatb3){\n            break;\n        }\n        u_xlat16_20 = float(u_xlati_loop_1);\n        u_xlatb3 = u_xlat16_20<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_16 = u_xlat16_20 + -2.0;\n        u_xlat16_20 = (u_xlatb3) ? u_xlat16_20 : u_xlat16_16;\n        u_xlatb3 = u_xlat16_20<1.0;\n        u_xlat16_20 = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n        u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);\n        u_xlat11 = inversesqrt(u_xlat5.x);\n        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5.x;\n        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati3].x;\n        u_xlat16_20 = (-u_xlat5.x) * u_xlat5.x + 1.0;\n        u_xlat16_20 = max(u_xlat16_20, 0.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n        u_xlat5.x = u_xlat16_20 * u_xlat11;\n        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n        u_xlat5.x = u_xlat16_20 * u_xlat5.x;\n        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz, u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat10_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat4.x * u_xlat4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_30 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat3;\nint u_xlati3;\nuint u_xlatu3;\nbool u_xlatb3;\nvec3 u_xlat4;\nvec3 u_xlat8;\nint u_xlati8;\nfloat u_xlat9;\nfloat u_xlat15;\nuint u_xlatu15;\nuint u_xlatu16;\nmediump float u_xlat16_17;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu15 =  uint(int(u_xlat16_2.x));\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu15 ; u_xlatu_loop_1++)\n    {\n        u_xlatu3 = uint(u_xlatu_loop_1 >> (2u & uint(0x1F)));\n        u_xlati8 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat3 = dot(unity_LightIndices[int(u_xlatu3)], ImmCB_1[u_xlati8]);\n        u_xlati3 = int(u_xlat3);\n        u_xlat8.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat4.x = max(u_xlat4.x, 6.10351562e-05);\n        u_xlat9 = inversesqrt(u_xlat4.x);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);\n        u_xlat9 = float(1.0) / float(u_xlat4.x);\n        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;\n        u_xlat16_17 = (-u_xlat4.x) * u_xlat4.x + 1.0;\n        u_xlat16_17 = max(u_xlat16_17, 0.0);\n        u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n        u_xlat4.x = u_xlat16_17 * u_xlat9;\n        u_xlat16_17 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);\n        u_xlat16_17 = u_xlat16_17 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n        u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n        u_xlat4.x = u_xlat16_17 * u_xlat4.x;\n        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_17 = dot(u_xlat1.xyz, u_xlat8.xyz);\n        u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat4.xyz * vec3(u_xlat16_17) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat4.x * u_xlat4.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_30 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = u_xlat1.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat10_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb27 = u_xlat27<vs_TEXCOORD6.z;\n    u_xlat16_3.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_12;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_3.x = (u_xlatb27) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat27 = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_30 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    vs_TEXCOORD5 = 0.0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = u_xlat1.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_3.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_3.x = (u_xlatb27) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat27 = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_30 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nint u_xlati3;\nbool u_xlatb3;\nmediump vec2 u_xlat16_4;\nvec3 u_xlat5;\nvec3 u_xlat9;\nfloat u_xlat11;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nint u_xlati18;\nint u_xlati19;\nmediump float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati18 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb3 = u_xlati_loop_1>=u_xlati18;\n        if(u_xlatb3){\n            break;\n        }\n        u_xlat16_20 = float(u_xlati_loop_1);\n        u_xlatb3 = u_xlat16_20<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb3)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_16 = u_xlat16_20 + -2.0;\n        u_xlat16_20 = (u_xlatb3) ? u_xlat16_20 : u_xlat16_16;\n        u_xlatb3 = u_xlat16_20<1.0;\n        u_xlat16_20 = (u_xlatb3) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati3 = int(u_xlat16_20);\n        u_xlat9.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat5.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n        u_xlat5.x = max(u_xlat5.x, 6.10351562e-05);\n        u_xlat11 = inversesqrt(u_xlat5.x);\n        u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat11);\n        u_xlat11 = float(1.0) / u_xlat5.x;\n        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati3].x;\n        u_xlat16_20 = (-u_xlat5.x) * u_xlat5.x + 1.0;\n        u_xlat16_20 = max(u_xlat16_20, 0.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n        u_xlat5.x = u_xlat16_20 * u_xlat11;\n        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat9.xyz);\n        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n        u_xlat5.x = u_xlat16_20 * u_xlat5.x;\n        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz, u_xlat9.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat5.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n    vs_TEXCOORD6.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat10_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb27 = u_xlat27<vs_TEXCOORD6.z;\n    u_xlat16_3.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_12;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_3.x = (u_xlatb27) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat27 = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_30 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nint u_xlati3;\nuint u_xlatu3;\nbool u_xlatb3;\nvec3 u_xlat4;\nvec3 u_xlat8;\nint u_xlati8;\nfloat u_xlat9;\nfloat u_xlat15;\nuint u_xlatu15;\nuint u_xlatu16;\nmediump float u_xlat16_17;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu15 =  uint(int(u_xlat16_2.x));\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu15 ; u_xlatu_loop_1++)\n    {\n        u_xlatu3 = uint(u_xlatu_loop_1 >> (2u & uint(0x1F)));\n        u_xlati8 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat3.x = dot(unity_LightIndices[int(u_xlatu3)], ImmCB_1[u_xlati8]);\n        u_xlati3 = int(u_xlat3.x);\n        u_xlat8.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati3].www + _AdditionalLightsPosition[u_xlati3].xyz;\n        u_xlat4.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n        u_xlat4.x = max(u_xlat4.x, 6.10351562e-05);\n        u_xlat9 = inversesqrt(u_xlat4.x);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat9);\n        u_xlat9 = float(1.0) / float(u_xlat4.x);\n        u_xlat4.x = u_xlat4.x * _AdditionalLightsAttenuation[u_xlati3].x;\n        u_xlat16_17 = (-u_xlat4.x) * u_xlat4.x + 1.0;\n        u_xlat16_17 = max(u_xlat16_17, 0.0);\n        u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n        u_xlat4.x = u_xlat16_17 * u_xlat9;\n        u_xlat16_17 = dot(_AdditionalLightsSpotDir[u_xlati3].xyz, u_xlat8.xyz);\n        u_xlat16_17 = u_xlat16_17 * _AdditionalLightsAttenuation[u_xlati3].z + _AdditionalLightsAttenuation[u_xlati3].w;\n        u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n        u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n        u_xlat4.x = u_xlat16_17 * u_xlat4.x;\n        u_xlat4.xyz = u_xlat4.xxx * _AdditionalLightsColor[u_xlati3].xyz;\n        u_xlat16_17 = dot(u_xlat1.xyz, u_xlat8.xyz);\n        u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat4.xyz * vec3(u_xlat16_17) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n    vs_TEXCOORD6.xyz = u_xlat3.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    vs_TEXCOORD8.xyz = vec3(0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_3.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_3.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_3.x = (u_xlatb27) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat27 = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat27 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_30 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_30, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_30 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_30;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nbvec4 u_xlatb3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nint u_xlati27;\nint u_xlatu27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat10_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat3.y = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat3.z = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat3.w = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);\n    u_xlat16_16.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.x = (u_xlatb3.x) ? float(1.0) : float(0.0);\n    u_xlat16_3.y = (u_xlatb3.y) ? float(1.0) : float(0.0);\n    u_xlat16_3.z = (u_xlatb3.z) ? float(1.0) : float(0.0);\n    u_xlat16_3.w = (u_xlatb3.w) ? float(1.0) : float(0.0);\n    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_3.yzw;\n    u_xlat16_3.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_32 = (-u_xlat16_32) + 4.0;\n    u_xlatu27 = int(u_xlat16_32);\n    u_xlati27 = op_shl(int(u_xlatu27), 2);\n    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati27 + 1)).xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati27).xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati27 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati27 + 3)).xyz;\n    u_xlat27 = texture2D(_MainLightShadowmapTexture, u_xlat8.xy, _GlobalMipBias.x).x;\n    u_xlatb27 = u_xlat27<u_xlat8.z;\n    u_xlat16_32 = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_33 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_33;\n    u_xlatb27 = 0.0>=u_xlat8.z;\n    u_xlatb31 = u_xlat8.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_32 = (u_xlatb27) ? 1.0 : u_xlat16_32;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_33 + u_xlat16_32;\n    u_xlat27 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_32 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_32;\n    u_xlat16_16.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_32 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_32, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_32 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_32;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_16.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nbvec4 u_xlatb3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nint u_xlati27;\nuint u_xlatu27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat3.y = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat3.z = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat3.w = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);\n    u_xlat16_16.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.x = (u_xlatb3.x) ? float(1.0) : float(0.0);\n    u_xlat16_3.y = (u_xlatb3.y) ? float(1.0) : float(0.0);\n    u_xlat16_3.z = (u_xlatb3.z) ? float(1.0) : float(0.0);\n    u_xlat16_3.w = (u_xlatb3.w) ? float(1.0) : float(0.0);\n    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_3.yzw;\n    u_xlat16_3.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_32 = (-u_xlat16_32) + 4.0;\n    u_xlatu27 = uint(u_xlat16_32);\n    u_xlati27 = int(int(u_xlatu27) << (2 & int(0x1F)));\n    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;\n    u_xlatb27 = 0.0>=u_xlat8.z;\n    u_xlatb31 = u_xlat8.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);\n    u_xlat16_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_8 * _MainLightShadowParams.x + u_xlat16_32;\n    u_xlat16_32 = (u_xlatb27) ? 1.0 : u_xlat16_32;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_33 + u_xlat16_32;\n    u_xlat27 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_32 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_32;\n    u_xlat16_16.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_32 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_32, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_32 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_32;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_16.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nlowp vec4 u_xlat10_1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat35;\nbool u_xlatb35;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_12;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_32 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_32 = u_xlat0.x * u_xlat0.x + (-u_xlat16_32);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_33 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_33 = u_xlat16_32 * u_xlat16_33;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_33 = u_xlat16_33 * 6.0;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat35 = inversesqrt(u_xlat35);\n    u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz;\n    u_xlatb35 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb35) ? u_xlat5.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb35) ? u_xlat5.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb35) ? u_xlat5.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_34 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;\n    u_xlat16_6.xyz = u_xlat0.xyz * (-vec3(u_xlat16_34)) + (-u_xlat16_4.xyz);\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_33);\n    u_xlat16_33 = u_xlat10_1.w + -1.0;\n    u_xlat16_33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;\n    u_xlat16_33 = max(u_xlat16_33, 0.0);\n    u_xlat16_33 = log2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.y;\n    u_xlat16_33 = exp2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(u_xlat16_33);\n    u_xlat16_33 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_33 = (-u_xlat16_33) + 1.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_4.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat10_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat10_1 * _BaseColor;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_7.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_14.xyz * vec3(u_xlat16_33);\n    u_xlat16_14.xyz = u_xlat16_6.xyz * u_xlat9.xyz;\n    u_xlat16_6.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_6.xyz + u_xlat16_14.xyz;\n    u_xlat35 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat35 = max(u_xlat35, 1.17549435e-38);\n    u_xlat35 = inversesqrt(u_xlat35);\n    u_xlat5.xyz = vec3(u_xlat35) * u_xlat5.xyz;\n    u_xlat35 = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat35 = clamp(u_xlat35, 0.0, 1.0);\n    u_xlat5.x = dot(_MainLightPosition.xyz, u_xlat5.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat5.x * u_xlat5.x;\n    u_xlat5.x = max(u_xlat16_33, 0.100000001);\n    u_xlat15 = u_xlat35 * u_xlat35;\n    u_xlat15 = u_xlat15 * u_xlat16_8.x + 1.00001001;\n    u_xlat15 = u_xlat15 * u_xlat15;\n    u_xlat5.x = u_xlat5.x * u_xlat15;\n    u_xlat16_33 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat5.x = u_xlat16_33 * u_xlat5.x;\n    u_xlat5.x = u_xlat16_32 / u_xlat5.x;\n    u_xlat16_32 = u_xlat5.x + -6.10351562e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 1000.0);\n    u_xlat16_4.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;\n    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb5 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb5) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nbvec4 u_xlatb3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nint u_xlati27;\nuint u_xlatu27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat3.y = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat3.z = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat3.w = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);\n    u_xlat16_16.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_16.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.x = (u_xlatb3.x) ? float(1.0) : float(0.0);\n    u_xlat16_3.y = (u_xlatb3.y) ? float(1.0) : float(0.0);\n    u_xlat16_3.z = (u_xlatb3.z) ? float(1.0) : float(0.0);\n    u_xlat16_3.w = (u_xlatb3.w) ? float(1.0) : float(0.0);\n    u_xlat16_16.xyz = u_xlat16_16.xyz + u_xlat16_3.yzw;\n    u_xlat16_3.yzw = max(u_xlat16_16.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = dot(u_xlat16_3, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_32 = (-u_xlat16_32) + 4.0;\n    u_xlatu27 = uint(u_xlat16_32);\n    u_xlati27 = int(int(u_xlatu27) << (2 & int(0x1F)));\n    u_xlat8.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 1)].xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati27].xyz * vs_TEXCOORD1.xxx + u_xlat8.xyz;\n    u_xlat8.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat8.xyz;\n    u_xlat8.xyz = u_xlat8.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati27 + 3)].xyz;\n    u_xlatb27 = 0.0>=u_xlat8.z;\n    u_xlatb31 = u_xlat8.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat8.xy,u_xlat8.z);\n    u_xlat16_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_32 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_8 * _MainLightShadowParams.x + u_xlat16_32;\n    u_xlat16_32 = (u_xlatb27) ? 1.0 : u_xlat16_32;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_33 + u_xlat16_32;\n    u_xlat27 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_32 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_32;\n    u_xlat16_16.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_32 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_32, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_32 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_32;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_16.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_7;\nmediump vec4 u_xlat16_8;\nmediump vec4 u_xlat16_9;\nmediump vec4 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec4 u_xlat16_14;\nmediump vec4 u_xlat16_15;\nfloat u_xlat16;\nmediump vec4 u_xlat16_16;\nmediump vec2 u_xlat16_17;\nmediump vec4 u_xlat16_18;\nmediump vec4 u_xlat16_19;\nmediump vec4 u_xlat16_20;\nvec3 u_xlat21;\nmediump float u_xlat16_21;\nbool u_xlatb21;\nfloat u_xlat24;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nmediump vec2 u_xlat16_31;\nmediump vec3 u_xlat16_32;\nmediump vec2 u_xlat16_51;\nmediump vec2 u_xlat16_53;\nmediump vec2 u_xlat16_54;\nmediump vec2 u_xlat16_55;\nmediump vec2 u_xlat16_57;\nfloat u_xlat66;\nbool u_xlatb66;\nfloat u_xlat68;\nmediump float u_xlat16_68;\nbool u_xlatb68;\nmediump float u_xlat16_69;\nmediump float u_xlat16_70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n    u_xlatb66 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat68 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat68 = inversesqrt(u_xlat68);\n    u_xlat2.xyz = vec3(u_xlat68) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb66) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb66) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb66) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat66 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat66 = inversesqrt(u_xlat66);\n    u_xlat2.xyz = vec3(u_xlat66) * vs_TEXCOORD2.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);\n    u_xlat16_69 = u_xlat2.y * u_xlat2.y;\n    u_xlat16_69 = u_xlat2.x * u_xlat2.x + (-u_xlat16_69);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_69) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_69 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_70 = (-u_xlat16_69) + _Smoothness;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_69);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_69 = (-_Smoothness) + 1.0;\n    u_xlat16_71 = u_xlat16_69 * u_xlat16_69;\n    u_xlat16_71 = max(u_xlat16_71, 0.0078125);\n    u_xlat16_72 = u_xlat16_71 * u_xlat16_71;\n    u_xlat16_70 = u_xlat16_70 + 1.0;\n    u_xlat16_70 = clamp(u_xlat16_70, 0.0, 1.0);\n    u_xlat16_7 = u_xlat16_71 * 4.0 + 2.0;\n    u_xlatb0 = 0.0<_MainLightShadowParams.y;\n    if(u_xlatb0){\n        u_xlatb0 = _MainLightShadowParams.y==1.0;\n        if(u_xlatb0){\n            u_xlat0 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset0;\n            vec3 txVec0 = vec3(u_xlat0.xy,vs_TEXCOORD6.z);\n            u_xlat16_8.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n            vec3 txVec1 = vec3(u_xlat0.zw,vs_TEXCOORD6.z);\n            u_xlat16_8.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n            u_xlat0 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset1;\n            vec3 txVec2 = vec3(u_xlat0.xy,vs_TEXCOORD6.z);\n            u_xlat16_8.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n            vec3 txVec3 = vec3(u_xlat0.zw,vs_TEXCOORD6.z);\n            u_xlat16_8.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n            u_xlat16_29.x = dot(u_xlat16_8, vec4(0.25, 0.25, 0.25, 0.25));\n        } else {\n            u_xlatb0 = _MainLightShadowParams.y==2.0;\n            if(u_xlatb0){\n                u_xlat16_51.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_51.xy = floor(u_xlat16_51.xy);\n                u_xlat16_9.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_51.xy);\n                u_xlat16_0 = u_xlat16_9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_8 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_53.xy = u_xlat16_8.yw * vec2(0.0799999982, 0.0799999982);\n                u_xlat16_10.xy = u_xlat16_8.xz * vec2(0.5, 0.5) + (-u_xlat16_9.xy);\n                u_xlat16_54.xy = (-u_xlat16_9.xy) + vec2(1.0, 1.0);\n                u_xlat16_11.xy = min(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.xy = (-u_xlat16_11.xy) * u_xlat16_11.xy + u_xlat16_54.xy;\n                u_xlat16_9.xy = max(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_9.xy = (-u_xlat16_9.xy) * u_xlat16_9.xy + u_xlat16_0.yw;\n                u_xlat16_11.xy = u_xlat16_11.xy + vec2(1.0, 1.0);\n                u_xlat16_9.xy = u_xlat16_9.xy + vec2(1.0, 1.0);\n                u_xlat16_8.xy = u_xlat16_10.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_10.xy = u_xlat16_54.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_11.xy = u_xlat16_11.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_12.xy = u_xlat16_9.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_9.xy = u_xlat16_0.yw * vec2(0.159999996, 0.159999996);\n                u_xlat16_8.z = u_xlat16_11.x;\n                u_xlat16_8.w = u_xlat16_9.x;\n                u_xlat16_10.z = u_xlat16_12.x;\n                u_xlat16_10.w = u_xlat16_53.x;\n                u_xlat16_0 = u_xlat16_8.zwxz + u_xlat16_10.zwxz;\n                u_xlat16_11.z = u_xlat16_8.y;\n                u_xlat16_11.w = u_xlat16_9.y;\n                u_xlat16_12.z = u_xlat16_10.y;\n                u_xlat16_12.w = u_xlat16_53.y;\n                u_xlat16_9.xyz = u_xlat16_11.zyw + u_xlat16_12.zyw;\n                u_xlat16_10.xyz = u_xlat16_10.xzw / u_xlat16_0.zwy;\n                u_xlat16_10.xyz = u_xlat16_10.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_11.xyz = u_xlat16_12.zyw / u_xlat16_9.xyz;\n                u_xlat16_11.xyz = u_xlat16_11.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_8.xyz = u_xlat16_10.yxz * _MainLightShadowmapSize.xxx;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * _MainLightShadowmapSize.yyy;\n                u_xlat16_8.w = u_xlat16_10.x;\n                u_xlat16_11 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.ywxw;\n                u_xlat16_12.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_8.zw;\n                u_xlat16_10.w = u_xlat16_8.y;\n                u_xlat16_8.yw = u_xlat16_10.yz;\n                u_xlat16_13 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.xyzy;\n                u_xlat16_10 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_10.wywz;\n                u_xlat16_8 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.xwzw;\n                u_xlat16_14 = u_xlat16_0.zwyz * u_xlat16_9.xxxy;\n                u_xlat16_15 = u_xlat16_0 * u_xlat16_9.yyzz;\n                u_xlat16_51.x = u_xlat16_0.y * u_xlat16_9.z;\n                vec3 txVec4 = vec3(u_xlat16_11.xy,vs_TEXCOORD6.z);\n                u_xlat16_68 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n                vec3 txVec5 = vec3(u_xlat16_11.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n                u_xlat16 = u_xlat16_14.y * u_xlat16_16.x;\n                u_xlat68 = u_xlat16_14.x * u_xlat16_68 + u_xlat16;\n                vec3 txVec6 = vec3(u_xlat16_12.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n                u_xlat68 = u_xlat16_14.z * u_xlat16_16.x + u_xlat68;\n                vec3 txVec7 = vec3(u_xlat16_10.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n                u_xlat68 = u_xlat16_14.w * u_xlat16_16.x + u_xlat68;\n                vec3 txVec8 = vec3(u_xlat16_13.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n                u_xlat68 = u_xlat16_15.x * u_xlat16_16.x + u_xlat68;\n                vec3 txVec9 = vec3(u_xlat16_13.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n                u_xlat68 = u_xlat16_15.y * u_xlat16_16.x + u_xlat68;\n                vec3 txVec10 = vec3(u_xlat16_10.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n                u_xlat68 = u_xlat16_15.z * u_xlat16_16.x + u_xlat68;\n                vec3 txVec11 = vec3(u_xlat16_8.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n                u_xlat68 = u_xlat16_15.w * u_xlat16_16.x + u_xlat68;\n                vec3 txVec12 = vec3(u_xlat16_8.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n                u_xlat29 = u_xlat16_51.x * u_xlat16_16.x + u_xlat68;\n                u_xlat16_29.x = u_xlat29;\n            } else {\n                u_xlat16_51.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_51.xy = floor(u_xlat16_51.xy);\n                u_xlat16_9.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_51.xy);\n                u_xlat16_0 = u_xlat16_9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_8 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_10.yw = u_xlat16_8.yw * vec2(0.0408160016, 0.0408160016);\n                u_xlat16_53.xy = u_xlat16_8.xz * vec2(0.5, 0.5) + (-u_xlat16_9.xy);\n                u_xlat16_11.xy = (-u_xlat16_9.xy) + vec2(1.0, 1.0);\n                u_xlat16_55.xy = min(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.xy = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_11.xy;\n                u_xlat16_55.xy = max(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.zw = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_0.yw;\n                u_xlat16_11 = u_xlat16_11 + vec4(2.0, 2.0, 2.0, 2.0);\n                u_xlat16_0.z = u_xlat16_11.z * 0.0816320032;\n                u_xlat16_8.xy = u_xlat16_53.yx * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_53.xy = u_xlat16_11.xy * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_8.z = u_xlat16_11.w * 0.0816320032;\n                u_xlat16_0.x = u_xlat16_8.y;\n                u_xlat16_0.yw = u_xlat16_9.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_11.xz = u_xlat16_9.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_11.y = u_xlat16_53.x;\n                u_xlat16_11.w = u_xlat16_10.y;\n                u_xlat16_0 = u_xlat16_0 + u_xlat16_11;\n                u_xlat16_8.yw = u_xlat16_9.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_10.xz = u_xlat16_9.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_10.y = u_xlat16_53.y;\n                u_xlat16_8 = u_xlat16_8 + u_xlat16_10;\n                u_xlat16_9 = u_xlat16_11 / u_xlat16_0;\n                u_xlat16_9 = u_xlat16_9 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_10 = u_xlat16_10 / u_xlat16_8;\n                u_xlat16_10 = u_xlat16_10 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_9 = u_xlat16_9.wxyz * _MainLightShadowmapSize.xxxx;\n                u_xlat16_10 = u_xlat16_10.xwyz * _MainLightShadowmapSize.yyyy;\n                u_xlat16_11.xzw = u_xlat16_9.yzw;\n                u_xlat16_11.y = u_xlat16_10.x;\n                u_xlat16_12 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_13.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.y = u_xlat16_11.y;\n                u_xlat16_11.y = u_xlat16_10.z;\n                u_xlat16_14 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_57.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.z = u_xlat16_11.y;\n                u_xlat16_15 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_9.xyxz;\n                u_xlat16_11.y = u_xlat16_10.w;\n                u_xlat16_16 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_31.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.w = u_xlat16_11.y;\n                u_xlat16_17.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_9.xw;\n                u_xlat16_10.xzw = u_xlat16_11.xzw;\n                u_xlat16_11 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_10.xyzy;\n                u_xlat16_54.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_10.wy;\n                u_xlat16_10.x = u_xlat16_9.x;\n                u_xlat16_51.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_10.xy;\n                u_xlat16_18 = u_xlat16_0 * u_xlat16_8.xxxx;\n                u_xlat16_19 = u_xlat16_0 * u_xlat16_8.yyyy;\n                u_xlat16_20 = u_xlat16_0 * u_xlat16_8.zzzz;\n                u_xlat16_0 = u_xlat16_0 * u_xlat16_8.wwww;\n                vec3 txVec13 = vec3(u_xlat16_12.xy,vs_TEXCOORD6.z);\n                u_xlat16_68 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n                vec3 txVec14 = vec3(u_xlat16_12.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n                u_xlat21.x = u_xlat16_18.y * u_xlat16_21;\n                u_xlat68 = u_xlat16_18.x * u_xlat16_68 + u_xlat21.x;\n                vec3 txVec15 = vec3(u_xlat16_13.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n                u_xlat68 = u_xlat16_18.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec16 = vec3(u_xlat16_15.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec16, 0.0);\n                u_xlat68 = u_xlat16_18.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec17 = vec3(u_xlat16_14.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec17, 0.0);\n                u_xlat68 = u_xlat16_19.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec18 = vec3(u_xlat16_14.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec18, 0.0);\n                u_xlat68 = u_xlat16_19.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec19 = vec3(u_xlat16_57.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec19, 0.0);\n                u_xlat68 = u_xlat16_19.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec20 = vec3(u_xlat16_15.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec20, 0.0);\n                u_xlat68 = u_xlat16_19.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec21 = vec3(u_xlat16_16.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec21, 0.0);\n                u_xlat68 = u_xlat16_20.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec22 = vec3(u_xlat16_16.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec22, 0.0);\n                u_xlat68 = u_xlat16_20.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec23 = vec3(u_xlat16_31.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec23, 0.0);\n                u_xlat68 = u_xlat16_20.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec24 = vec3(u_xlat16_17.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec24, 0.0);\n                u_xlat68 = u_xlat16_20.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec25 = vec3(u_xlat16_11.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec25, 0.0);\n                u_xlat68 = u_xlat16_0.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec26 = vec3(u_xlat16_11.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec26, 0.0);\n                u_xlat68 = u_xlat16_0.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec27 = vec3(u_xlat16_54.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec27, 0.0);\n                u_xlat68 = u_xlat16_0.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec28 = vec3(u_xlat16_51.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec28, 0.0);\n                u_xlat29 = u_xlat16_0.w * u_xlat16_21 + u_xlat68;\n                u_xlat16_29.x = u_xlat29;\n            }\n        }\n    } else {\n        vec3 txVec29 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_29.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec29, 0.0);\n        u_xlat16_29.x = u_xlat16_29.x;\n    }\n    u_xlat16_51.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_29.x = u_xlat16_29.x * _MainLightShadowParams.x + u_xlat16_51.x;\n    u_xlatb68 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb21 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb68 = u_xlatb68 || u_xlatb21;\n    u_xlat16_29.x = (u_xlatb68) ? 1.0 : u_xlat16_29.x;\n    u_xlat21.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat68 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlat68 = u_xlat68 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat68 = clamp(u_xlat68, 0.0, 1.0);\n    u_xlat16_51.x = (-u_xlat16_29.x) + 1.0;\n    u_xlat16_29.x = u_xlat68 * u_xlat16_51.x + u_xlat16_29.x;\n    u_xlat16_51.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_51.x = u_xlat16_51.x + u_xlat16_51.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_51.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_51.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_51.x = clamp(u_xlat16_51.x, 0.0, 1.0);\n    u_xlat16_51.x = (-u_xlat16_51.x) + 1.0;\n    u_xlat16_51.x = u_xlat16_51.x * u_xlat16_51.x;\n    u_xlat16_51.x = u_xlat16_51.x * u_xlat16_51.x;\n    u_xlat16_73 = (-u_xlat16_69) * 0.699999988 + 1.70000005;\n    u_xlat16_69 = u_xlat16_69 * u_xlat16_73;\n    u_xlat16_69 = u_xlat16_69 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_69);\n    u_xlat16_69 = u_xlat16_0.w + -1.0;\n    u_xlat16_69 = unity_SpecCube0_HDR.w * u_xlat16_69 + 1.0;\n    u_xlat16_69 = max(u_xlat16_69, 0.0);\n    u_xlat16_69 = log2(u_xlat16_69);\n    u_xlat16_69 = u_xlat16_69 * unity_SpecCube0_HDR.y;\n    u_xlat16_69 = exp2(u_xlat16_69);\n    u_xlat16_69 = u_xlat16_69 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_69);\n    u_xlat16_10.xy = vec2(u_xlat16_71) * vec2(u_xlat16_71) + vec2(-1.0, 1.0);\n    u_xlat16_69 = float(1.0) / u_xlat16_10.y;\n    u_xlat16_32.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_70);\n    u_xlat16_32.xyz = u_xlat16_51.xxx * u_xlat16_32.xyz + u_xlat16_6.xyz;\n    u_xlat21.xyz = vec3(u_xlat16_69) * u_xlat16_32.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat21.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_9.xyz;\n    u_xlat68 = u_xlat16_29.x * unity_LightData.z;\n    u_xlat16_69 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_69 = clamp(u_xlat16_69, 0.0, 1.0);\n    u_xlat16_69 = u_xlat68 * u_xlat16_69;\n    u_xlat16_29.xyz = vec3(u_xlat16_69) * _MainLightColor.xyz;\n    u_xlat21.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat68 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlat68 = max(u_xlat68, 1.17549435e-38);\n    u_xlat68 = inversesqrt(u_xlat68);\n    u_xlat21.xyz = vec3(u_xlat68) * u_xlat21.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat21.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat24 = dot(_MainLightPosition.xyz, u_xlat21.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x + 1.00001001;\n    u_xlat16_3.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat24 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat2.x = u_xlat24 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_7 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_72 / u_xlat2.x;\n    u_xlat16_3.x = u_xlat2.x + -6.10351562e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_4.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb2 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb2) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nbool u_xlatb7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat17;\nmediump float u_xlat16_17;\nbool u_xlatb17;\nmediump vec2 u_xlat16_20;\nmediump vec2 u_xlat16_21;\nmediump vec2 u_xlat16_22;\nmediump float u_xlat16_27;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nbool u_xlatb37;\nvoid main()\n{\n    u_xlat16_0.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_0.xy = floor(u_xlat16_0.xy);\n    u_xlat16_20.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_0.xy);\n    u_xlat16_1.xy = (-u_xlat16_20.xy) + vec2(1.0, 1.0);\n    u_xlat16_21.xy = min(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_1.xy = (-u_xlat16_21.xy) * u_xlat16_21.xy + u_xlat16_1.xy;\n    u_xlat16_1.xy = u_xlat16_1.xy + vec2(2.0, 2.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_2.y = u_xlat16_1.x;\n    u_xlat16_3.xy = max(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_4 = u_xlat16_20.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_4.yw;\n    u_xlat16_4 = u_xlat16_4.xxzz * u_xlat16_4.xxzz;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(2.0, 2.0);\n    u_xlat16_5.z = u_xlat16_3.x * 0.0816320032;\n    u_xlat16_3.z = u_xlat16_3.y * 0.0816320032;\n    u_xlat16_4.xz = u_xlat16_4.xz * vec2(0.5, 0.5) + (-u_xlat16_20.xy);\n    u_xlat16_2.zw = u_xlat16_4.wy * vec2(0.0408160016, 0.0408160016);\n    u_xlat16_3.xy = u_xlat16_4.zx * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_5.x = u_xlat16_3.y;\n    u_xlat16_1.w = u_xlat16_2.z;\n    u_xlat16_5.yw = u_xlat16_20.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_2.xz = u_xlat16_20.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_4 = u_xlat16_2 + u_xlat16_5;\n    u_xlat16_2 = u_xlat16_2 / u_xlat16_4;\n    u_xlat16_2 = u_xlat16_2 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_2 = u_xlat16_2.wxyz * _MainLightShadowmapSize.xxxx;\n    u_xlat16_5.xzw = u_xlat16_2.yzw;\n    u_xlat16_3.yw = u_xlat16_20.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_1.xz = u_xlat16_20.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_3 = u_xlat16_1 + u_xlat16_3;\n    u_xlat16_1 = u_xlat16_1 / u_xlat16_3;\n    u_xlat16_1 = u_xlat16_1 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_1 = u_xlat16_1.xwyz * _MainLightShadowmapSize.yyyy;\n    u_xlat16_5.y = u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    vec3 txVec0 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat16_6 = u_xlat16_3.xxxx * u_xlat16_4;\n    u_xlat7.x = u_xlat16_7 * u_xlat16_6.y;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    u_xlat16_2.y = u_xlat16_5.y;\n    vec3 txVec2 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_5.y = u_xlat16_1.z;\n    u_xlat16_2.z = u_xlat16_5.y;\n    u_xlat16_8 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_2.xyxz;\n    vec3 txVec3 = vec3(u_xlat16_8.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_8.zw,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    vec3 txVec5 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_37 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    vec3 txVec7 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    u_xlat16_6 = u_xlat16_3.yyyy * u_xlat16_4;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_37 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.y * u_xlat16_9 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_17 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_27 + u_xlat7.x;\n    u_xlat16_5.y = u_xlat16_1.w;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    vec3 txVec8 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    vec3 txVec9 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n    u_xlat16_6 = u_xlat16_3.zzzz * u_xlat16_4;\n    u_xlat16_3 = u_xlat16_3.wwww * u_xlat16_4;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_17 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.y * u_xlat16_27 + u_xlat7.x;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    u_xlat16_1.xzw = u_xlat16_5.xzw;\n    u_xlat16_2.w = u_xlat16_5.y;\n    u_xlat16_22.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_2.xw;\n    vec3 txVec10 = vec3(u_xlat16_22.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n    vec3 txVec11 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_27 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_4 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_1.xyzy;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_1.wy;\n    u_xlat16_2.y = u_xlat16_1.y;\n    u_xlat16_0.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_2.xy;\n    vec3 txVec12 = vec3(u_xlat16_0.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n    vec3 txVec13 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n    vec3 txVec14 = vec3(u_xlat16_4.xy,vs_TEXCOORD6.z);\n    u_xlat16_37 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n    vec3 txVec15 = vec3(u_xlat16_4.zw,vs_TEXCOORD6.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n    u_xlat7.x = u_xlat16_3.x * u_xlat16_37 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.y * u_xlat16_9 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.z * u_xlat16_27 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_0.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_0.x = u_xlat7.x * _MainLightShadowParams.x + u_xlat16_0.x;\n    u_xlatb7 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb17 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb7 = u_xlatb17 || u_xlatb7;\n    u_xlat16_0.x = (u_xlatb7) ? 1.0 : u_xlat16_0.x;\n    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat7.x = u_xlat7.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat16_0.x = u_xlat7.x * u_xlat16_10 + u_xlat16_0.x;\n    u_xlat7.x = u_xlat16_0.x * unity_LightData.z;\n    u_xlat17 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat0.xyz = vec3(u_xlat17) * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat7.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_31 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_31 = u_xlat0.x * u_xlat0.x + (-u_xlat16_31);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_2.xyz = unity_SHC.xyz * vec3(u_xlat16_31) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_31 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_31) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_31 * u_xlat16_32;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = max(u_xlat16_31, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;\n    u_xlatb37 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb37) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb37) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb37) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_33 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_3.xyz);\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat16_4.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat7.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_13.x = (-u_xlat16_3.x) + _Smoothness;\n    u_xlat16_13.x = u_xlat16_13.x + 1.0;\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_4 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_4 = u_xlat16_4 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = u_xlat16_13.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_13.xyz = vec3(u_xlat16_32) * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_31) * vec2(u_xlat16_31) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_13.xyz * vec3(u_xlat16_32);\n    u_xlat16_13.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat16_13.xyz;\n    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat37 = max(u_xlat37, 1.17549435e-38);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;\n    u_xlat37 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat7.x * u_xlat7.x;\n    u_xlat7.x = max(u_xlat16_32, 0.100000001);\n    u_xlat17 = u_xlat37 * u_xlat37;\n    u_xlat17 = u_xlat17 * u_xlat16_8.x + 1.00001001;\n    u_xlat17 = u_xlat17 * u_xlat17;\n    u_xlat7.x = u_xlat7.x * u_xlat17;\n    u_xlat16_32 = u_xlat16_31 * 4.0 + 2.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat7.x = u_xlat16_32 * u_xlat7.x;\n    u_xlat7.x = u_xlat16_31 / u_xlat7.x;\n    u_xlat16_31 = u_xlat7.x + -6.10351562e-05;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = min(u_xlat16_31, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_31) + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_0 = min(u_xlat16_4, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb7 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb7) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec4 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat3 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset0;\n    vec3 txVec0 = vec3(u_xlat3.xy,vs_TEXCOORD6.z);\n    u_xlat16_8.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat3.zw,vs_TEXCOORD6.z);\n    u_xlat16_8.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat3 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset1;\n    vec3 txVec2 = vec3(u_xlat3.xy,vs_TEXCOORD6.z);\n    u_xlat16_8.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    vec3 txVec3 = vec3(u_xlat3.zw,vs_TEXCOORD6.z);\n    u_xlat16_8.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    u_xlat16_32 = dot(u_xlat16_8, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_33 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * _MainLightShadowParams.x + u_xlat16_33;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_32 = (u_xlatb27) ? 1.0 : u_xlat16_32;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_33 + u_xlat16_32;\n    u_xlat27 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_32 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_32;\n    u_xlat16_16.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_32 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_32, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_32 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_32;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_16.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_6;\nbool u_xlatb6;\nmediump vec4 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nmediump float u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_20;\nmediump vec2 u_xlat16_21;\nfloat u_xlat26;\nmediump float u_xlat16_26;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nfloat u_xlat36;\nmediump float u_xlat16_36;\nbool u_xlatb36;\nvoid main()\n{\n    u_xlat16_0.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_0.xy = floor(u_xlat16_0.xy);\n    u_xlat16_20.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_0.xy);\n    u_xlat16_1.xy = min(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_21.xy = (-u_xlat16_20.xy) + vec2(1.0, 1.0);\n    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat16_1.xy + u_xlat16_21.xy;\n    u_xlat16_2.xy = u_xlat16_21.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_1.xy = u_xlat16_1.xy + vec2(1.0, 1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.xy = max(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_4 = u_xlat16_20.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_4.yw;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_5 = u_xlat16_4.xxzz * u_xlat16_4.xxzz;\n    u_xlat16_4.xy = u_xlat16_4.yw * vec2(0.159999996, 0.159999996);\n    u_xlat16_20.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_20.xy);\n    u_xlat16_2.zw = u_xlat16_5.wy * vec2(0.0799999982, 0.0799999982);\n    u_xlat16_5.xy = u_xlat16_20.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_1.z = u_xlat16_5.y;\n    u_xlat16_1.w = u_xlat16_4.y;\n    u_xlat16_5.w = u_xlat16_4.x;\n    u_xlat16_3.zw = u_xlat16_2.yz;\n    u_xlat16_11.xyz = u_xlat16_1.zyw + u_xlat16_3.zyw;\n    u_xlat16_5.z = u_xlat16_1.x;\n    u_xlat16_13.xyz = u_xlat16_3.zyw / u_xlat16_11.xyz;\n    u_xlat16_2.z = u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_13.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _MainLightShadowmapSize.yyy;\n    u_xlat16_4.w = u_xlat16_3.x;\n    u_xlat16_5 = u_xlat16_2.zwxz + u_xlat16_5.zwxz;\n    u_xlat16_2.xyz = u_xlat16_2.xzw / u_xlat16_5.zwy;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_4.xyz = u_xlat16_2.yxz * _MainLightShadowmapSize.xxx;\n    u_xlat16_2 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.ywxw;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_4.zw;\n    vec3 txVec0 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_2.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    vec3 txVec2 = vec3(u_xlat16_2.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat16_2 = u_xlat16_11.xxxy * u_xlat16_5.zwyz;\n    u_xlat26 = u_xlat16_26 * u_xlat16_2.y;\n    u_xlat16 = u_xlat16_2.x * u_xlat16_16 + u_xlat26;\n    u_xlat6.x = u_xlat16_2.z * u_xlat16_6 + u_xlat16;\n    u_xlat16_3.w = u_xlat16_4.y;\n    u_xlat16_7 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_3.wywz;\n    u_xlat16_4.yw = u_xlat16_3.yz;\n    vec3 txVec3 = vec3(u_xlat16_7.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_7.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat6.x = u_xlat16_2.w * u_xlat16_16 + u_xlat6.x;\n    u_xlat16_2 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.xyzy;\n    u_xlat16_0 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.xwzw;\n    vec3 txVec5 = vec3(u_xlat16_2.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_2.zw,vs_TEXCOORD6.z);\n    u_xlat16_36 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    u_xlat16_2 = u_xlat16_11.yyzz * u_xlat16_5;\n    u_xlat16_1.x = u_xlat16_11.z * u_xlat16_5.y;\n    u_xlat6.x = u_xlat16_2.x * u_xlat16_16 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_2.y * u_xlat16_36 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_2.z * u_xlat16_26 + u_xlat6.x;\n    vec3 txVec7 = vec3(u_xlat16_0.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    vec3 txVec8 = vec3(u_xlat16_0.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    u_xlat6.x = u_xlat16_2.w * u_xlat16_16 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_1.x * u_xlat16_26 + u_xlat6.x;\n    u_xlat16_0.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_0.x = u_xlat6.x * _MainLightShadowParams.x + u_xlat16_0.x;\n    u_xlatb6 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb16 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb6 = u_xlatb16 || u_xlatb6;\n    u_xlat16_0.x = (u_xlatb6) ? 1.0 : u_xlat16_0.x;\n    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = u_xlat6.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_0.x = u_xlat6.x * u_xlat16_10 + u_xlat16_0.x;\n    u_xlat6.x = u_xlat16_0.x * unity_LightData.z;\n    u_xlat16 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat0.xyz = vec3(u_xlat16) * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat6.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_31 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_31 = u_xlat0.x * u_xlat0.x + (-u_xlat16_31);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_2.xyz = unity_SHC.xyz * vec3(u_xlat16_31) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_31 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_31) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_31 * u_xlat16_32;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = max(u_xlat16_31, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlatb36 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb36) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb36) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb36) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_33 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_3.xyz);\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat16_4.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat6.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_13.x = (-u_xlat16_3.x) + _Smoothness;\n    u_xlat16_13.x = u_xlat16_13.x + 1.0;\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_4 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_4 = u_xlat16_4 * _BaseColor;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = u_xlat16_13.xxx + (-u_xlat16_7.xyz);\n    u_xlat16_13.xyz = vec3(u_xlat16_32) * u_xlat16_13.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_31) * vec2(u_xlat16_31) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_13.xyz * vec3(u_xlat16_32);\n    u_xlat16_13.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat16_13.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 1.17549435e-38);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat6.x = dot(_MainLightPosition.xyz, u_xlat6.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat6.x * u_xlat6.x;\n    u_xlat6.x = max(u_xlat16_32, 0.100000001);\n    u_xlat16 = u_xlat36 * u_xlat36;\n    u_xlat16 = u_xlat16 * u_xlat16_8.x + 1.00001001;\n    u_xlat16 = u_xlat16 * u_xlat16;\n    u_xlat6.x = u_xlat6.x * u_xlat16;\n    u_xlat16_32 = u_xlat16_31 * 4.0 + 2.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat6.x = u_xlat16_32 * u_xlat6.x;\n    u_xlat6.x = u_xlat16_31 / u_xlat6.x;\n    u_xlat16_31 = u_xlat6.x + -6.10351562e-05;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = min(u_xlat16_31, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31) + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_0 = min(u_xlat16_4, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb6 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb6) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_7;\nmediump vec4 u_xlat16_8;\nmediump vec4 u_xlat16_9;\nmediump vec4 u_xlat16_10;\nmediump vec4 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec4 u_xlat16_14;\nmediump vec4 u_xlat16_15;\nfloat u_xlat16;\nmediump vec4 u_xlat16_16;\nmediump vec2 u_xlat16_17;\nmediump vec4 u_xlat16_18;\nmediump vec4 u_xlat16_19;\nmediump vec4 u_xlat16_20;\nvec3 u_xlat21;\nmediump float u_xlat16_21;\nbool u_xlatb21;\nfloat u_xlat24;\nfloat u_xlat29;\nmediump vec3 u_xlat16_29;\nmediump vec2 u_xlat16_31;\nmediump vec3 u_xlat16_32;\nmediump vec2 u_xlat16_51;\nmediump vec2 u_xlat16_53;\nmediump vec2 u_xlat16_54;\nmediump vec2 u_xlat16_55;\nmediump vec2 u_xlat16_57;\nfloat u_xlat66;\nbool u_xlatb66;\nfloat u_xlat68;\nmediump float u_xlat16_68;\nbool u_xlatb68;\nmediump float u_xlat16_69;\nmediump float u_xlat16_70;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n    u_xlatb66 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat68 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat68 = inversesqrt(u_xlat68);\n    u_xlat2.xyz = vec3(u_xlat68) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb66) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb66) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb66) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat66 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat66 = inversesqrt(u_xlat66);\n    u_xlat2.xyz = vec3(u_xlat66) * vs_TEXCOORD2.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_5);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_5);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_5);\n    u_xlat16_69 = u_xlat2.y * u_xlat2.y;\n    u_xlat16_69 = u_xlat2.x * u_xlat2.x + (-u_xlat16_69);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_69) + u_xlat16_6.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_69 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_70 = (-u_xlat16_69) + _Smoothness;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_69);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_69 = (-_Smoothness) + 1.0;\n    u_xlat16_71 = u_xlat16_69 * u_xlat16_69;\n    u_xlat16_71 = max(u_xlat16_71, 0.0078125);\n    u_xlat16_72 = u_xlat16_71 * u_xlat16_71;\n    u_xlat16_70 = u_xlat16_70 + 1.0;\n    u_xlat16_70 = clamp(u_xlat16_70, 0.0, 1.0);\n    u_xlat16_7 = u_xlat16_71 * 4.0 + 2.0;\n    u_xlatb0 = 0.0<_MainLightShadowParams.y;\n    if(u_xlatb0){\n        u_xlatb0 = _MainLightShadowParams.y==1.0;\n        if(u_xlatb0){\n            u_xlat0 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset0;\n            vec3 txVec0 = vec3(u_xlat0.xy,vs_TEXCOORD6.z);\n            u_xlat16_8.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n            vec3 txVec1 = vec3(u_xlat0.zw,vs_TEXCOORD6.z);\n            u_xlat16_8.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n            u_xlat0 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset1;\n            vec3 txVec2 = vec3(u_xlat0.xy,vs_TEXCOORD6.z);\n            u_xlat16_8.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n            vec3 txVec3 = vec3(u_xlat0.zw,vs_TEXCOORD6.z);\n            u_xlat16_8.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n            u_xlat16_29.x = dot(u_xlat16_8, vec4(0.25, 0.25, 0.25, 0.25));\n        } else {\n            u_xlatb0 = _MainLightShadowParams.y==2.0;\n            if(u_xlatb0){\n                u_xlat16_51.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_51.xy = floor(u_xlat16_51.xy);\n                u_xlat16_9.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_51.xy);\n                u_xlat16_0 = u_xlat16_9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_8 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_53.xy = u_xlat16_8.yw * vec2(0.0799999982, 0.0799999982);\n                u_xlat16_10.xy = u_xlat16_8.xz * vec2(0.5, 0.5) + (-u_xlat16_9.xy);\n                u_xlat16_54.xy = (-u_xlat16_9.xy) + vec2(1.0, 1.0);\n                u_xlat16_11.xy = min(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.xy = (-u_xlat16_11.xy) * u_xlat16_11.xy + u_xlat16_54.xy;\n                u_xlat16_9.xy = max(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_9.xy = (-u_xlat16_9.xy) * u_xlat16_9.xy + u_xlat16_0.yw;\n                u_xlat16_11.xy = u_xlat16_11.xy + vec2(1.0, 1.0);\n                u_xlat16_9.xy = u_xlat16_9.xy + vec2(1.0, 1.0);\n                u_xlat16_8.xy = u_xlat16_10.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_10.xy = u_xlat16_54.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_11.xy = u_xlat16_11.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_12.xy = u_xlat16_9.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_9.xy = u_xlat16_0.yw * vec2(0.159999996, 0.159999996);\n                u_xlat16_8.z = u_xlat16_11.x;\n                u_xlat16_8.w = u_xlat16_9.x;\n                u_xlat16_10.z = u_xlat16_12.x;\n                u_xlat16_10.w = u_xlat16_53.x;\n                u_xlat16_0 = u_xlat16_8.zwxz + u_xlat16_10.zwxz;\n                u_xlat16_11.z = u_xlat16_8.y;\n                u_xlat16_11.w = u_xlat16_9.y;\n                u_xlat16_12.z = u_xlat16_10.y;\n                u_xlat16_12.w = u_xlat16_53.y;\n                u_xlat16_9.xyz = u_xlat16_11.zyw + u_xlat16_12.zyw;\n                u_xlat16_10.xyz = u_xlat16_10.xzw / u_xlat16_0.zwy;\n                u_xlat16_10.xyz = u_xlat16_10.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_11.xyz = u_xlat16_12.zyw / u_xlat16_9.xyz;\n                u_xlat16_11.xyz = u_xlat16_11.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_8.xyz = u_xlat16_10.yxz * _MainLightShadowmapSize.xxx;\n                u_xlat16_10.xyz = u_xlat16_11.xyz * _MainLightShadowmapSize.yyy;\n                u_xlat16_8.w = u_xlat16_10.x;\n                u_xlat16_11 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.ywxw;\n                u_xlat16_12.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_8.zw;\n                u_xlat16_10.w = u_xlat16_8.y;\n                u_xlat16_8.yw = u_xlat16_10.yz;\n                u_xlat16_13 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.xyzy;\n                u_xlat16_10 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_10.wywz;\n                u_xlat16_8 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_8.xwzw;\n                u_xlat16_14 = u_xlat16_0.zwyz * u_xlat16_9.xxxy;\n                u_xlat16_15 = u_xlat16_0 * u_xlat16_9.yyzz;\n                u_xlat16_51.x = u_xlat16_0.y * u_xlat16_9.z;\n                vec3 txVec4 = vec3(u_xlat16_11.xy,vs_TEXCOORD6.z);\n                u_xlat16_68 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n                vec3 txVec5 = vec3(u_xlat16_11.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n                u_xlat16 = u_xlat16_14.y * u_xlat16_16.x;\n                u_xlat68 = u_xlat16_14.x * u_xlat16_68 + u_xlat16;\n                vec3 txVec6 = vec3(u_xlat16_12.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n                u_xlat68 = u_xlat16_14.z * u_xlat16_16.x + u_xlat68;\n                vec3 txVec7 = vec3(u_xlat16_10.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n                u_xlat68 = u_xlat16_14.w * u_xlat16_16.x + u_xlat68;\n                vec3 txVec8 = vec3(u_xlat16_13.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n                u_xlat68 = u_xlat16_15.x * u_xlat16_16.x + u_xlat68;\n                vec3 txVec9 = vec3(u_xlat16_13.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n                u_xlat68 = u_xlat16_15.y * u_xlat16_16.x + u_xlat68;\n                vec3 txVec10 = vec3(u_xlat16_10.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n                u_xlat68 = u_xlat16_15.z * u_xlat16_16.x + u_xlat68;\n                vec3 txVec11 = vec3(u_xlat16_8.xy,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n                u_xlat68 = u_xlat16_15.w * u_xlat16_16.x + u_xlat68;\n                vec3 txVec12 = vec3(u_xlat16_8.zw,vs_TEXCOORD6.z);\n                u_xlat16_16.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n                u_xlat29 = u_xlat16_51.x * u_xlat16_16.x + u_xlat68;\n                u_xlat16_29.x = u_xlat29;\n            } else {\n                u_xlat16_51.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_51.xy = floor(u_xlat16_51.xy);\n                u_xlat16_9.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_51.xy);\n                u_xlat16_0 = u_xlat16_9.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_8 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_10.yw = u_xlat16_8.yw * vec2(0.0408160016, 0.0408160016);\n                u_xlat16_53.xy = u_xlat16_8.xz * vec2(0.5, 0.5) + (-u_xlat16_9.xy);\n                u_xlat16_11.xy = (-u_xlat16_9.xy) + vec2(1.0, 1.0);\n                u_xlat16_55.xy = min(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.xy = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_11.xy;\n                u_xlat16_55.xy = max(u_xlat16_9.xy, vec2(0.0, 0.0));\n                u_xlat16_11.zw = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_0.yw;\n                u_xlat16_11 = u_xlat16_11 + vec4(2.0, 2.0, 2.0, 2.0);\n                u_xlat16_0.z = u_xlat16_11.z * 0.0816320032;\n                u_xlat16_8.xy = u_xlat16_53.yx * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_53.xy = u_xlat16_11.xy * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_8.z = u_xlat16_11.w * 0.0816320032;\n                u_xlat16_0.x = u_xlat16_8.y;\n                u_xlat16_0.yw = u_xlat16_9.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_11.xz = u_xlat16_9.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_11.y = u_xlat16_53.x;\n                u_xlat16_11.w = u_xlat16_10.y;\n                u_xlat16_0 = u_xlat16_0 + u_xlat16_11;\n                u_xlat16_8.yw = u_xlat16_9.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_10.xz = u_xlat16_9.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_10.y = u_xlat16_53.y;\n                u_xlat16_8 = u_xlat16_8 + u_xlat16_10;\n                u_xlat16_9 = u_xlat16_11 / u_xlat16_0;\n                u_xlat16_9 = u_xlat16_9 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_10 = u_xlat16_10 / u_xlat16_8;\n                u_xlat16_10 = u_xlat16_10 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_9 = u_xlat16_9.wxyz * _MainLightShadowmapSize.xxxx;\n                u_xlat16_10 = u_xlat16_10.xwyz * _MainLightShadowmapSize.yyyy;\n                u_xlat16_11.xzw = u_xlat16_9.yzw;\n                u_xlat16_11.y = u_xlat16_10.x;\n                u_xlat16_12 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_13.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.y = u_xlat16_11.y;\n                u_xlat16_11.y = u_xlat16_10.z;\n                u_xlat16_14 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_57.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.z = u_xlat16_11.y;\n                u_xlat16_15 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_9.xyxz;\n                u_xlat16_11.y = u_xlat16_10.w;\n                u_xlat16_16 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_11.xyzy;\n                u_xlat16_31.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_11.wy;\n                u_xlat16_9.w = u_xlat16_11.y;\n                u_xlat16_17.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_9.xw;\n                u_xlat16_10.xzw = u_xlat16_11.xzw;\n                u_xlat16_11 = u_xlat16_51.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_10.xyzy;\n                u_xlat16_54.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_10.wy;\n                u_xlat16_10.x = u_xlat16_9.x;\n                u_xlat16_51.xy = u_xlat16_51.xy * _MainLightShadowmapSize.xy + u_xlat16_10.xy;\n                u_xlat16_18 = u_xlat16_0 * u_xlat16_8.xxxx;\n                u_xlat16_19 = u_xlat16_0 * u_xlat16_8.yyyy;\n                u_xlat16_20 = u_xlat16_0 * u_xlat16_8.zzzz;\n                u_xlat16_0 = u_xlat16_0 * u_xlat16_8.wwww;\n                vec3 txVec13 = vec3(u_xlat16_12.xy,vs_TEXCOORD6.z);\n                u_xlat16_68 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n                vec3 txVec14 = vec3(u_xlat16_12.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n                u_xlat21.x = u_xlat16_18.y * u_xlat16_21;\n                u_xlat68 = u_xlat16_18.x * u_xlat16_68 + u_xlat21.x;\n                vec3 txVec15 = vec3(u_xlat16_13.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n                u_xlat68 = u_xlat16_18.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec16 = vec3(u_xlat16_15.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec16, 0.0);\n                u_xlat68 = u_xlat16_18.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec17 = vec3(u_xlat16_14.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec17, 0.0);\n                u_xlat68 = u_xlat16_19.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec18 = vec3(u_xlat16_14.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec18, 0.0);\n                u_xlat68 = u_xlat16_19.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec19 = vec3(u_xlat16_57.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec19, 0.0);\n                u_xlat68 = u_xlat16_19.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec20 = vec3(u_xlat16_15.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec20, 0.0);\n                u_xlat68 = u_xlat16_19.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec21 = vec3(u_xlat16_16.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec21, 0.0);\n                u_xlat68 = u_xlat16_20.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec22 = vec3(u_xlat16_16.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec22, 0.0);\n                u_xlat68 = u_xlat16_20.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec23 = vec3(u_xlat16_31.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec23, 0.0);\n                u_xlat68 = u_xlat16_20.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec24 = vec3(u_xlat16_17.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec24, 0.0);\n                u_xlat68 = u_xlat16_20.w * u_xlat16_21 + u_xlat68;\n                vec3 txVec25 = vec3(u_xlat16_11.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec25, 0.0);\n                u_xlat68 = u_xlat16_0.x * u_xlat16_21 + u_xlat68;\n                vec3 txVec26 = vec3(u_xlat16_11.zw,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec26, 0.0);\n                u_xlat68 = u_xlat16_0.y * u_xlat16_21 + u_xlat68;\n                vec3 txVec27 = vec3(u_xlat16_54.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec27, 0.0);\n                u_xlat68 = u_xlat16_0.z * u_xlat16_21 + u_xlat68;\n                vec3 txVec28 = vec3(u_xlat16_51.xy,vs_TEXCOORD6.z);\n                u_xlat16_21 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec28, 0.0);\n                u_xlat29 = u_xlat16_0.w * u_xlat16_21 + u_xlat68;\n                u_xlat16_29.x = u_xlat29;\n            }\n        }\n    } else {\n        vec3 txVec29 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_29.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec29, 0.0);\n        u_xlat16_29.x = u_xlat16_29.x;\n    }\n    u_xlat16_51.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_29.x = u_xlat16_29.x * _MainLightShadowParams.x + u_xlat16_51.x;\n    u_xlatb68 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb21 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb68 = u_xlatb68 || u_xlatb21;\n    u_xlat16_29.x = (u_xlatb68) ? 1.0 : u_xlat16_29.x;\n    u_xlat21.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat68 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlat68 = u_xlat68 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat68 = clamp(u_xlat68, 0.0, 1.0);\n    u_xlat16_51.x = (-u_xlat16_29.x) + 1.0;\n    u_xlat16_29.x = u_xlat68 * u_xlat16_51.x + u_xlat16_29.x;\n    u_xlat16_51.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_51.x = u_xlat16_51.x + u_xlat16_51.x;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-u_xlat16_51.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_51.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_51.x = clamp(u_xlat16_51.x, 0.0, 1.0);\n    u_xlat16_51.x = (-u_xlat16_51.x) + 1.0;\n    u_xlat16_51.x = u_xlat16_51.x * u_xlat16_51.x;\n    u_xlat16_51.x = u_xlat16_51.x * u_xlat16_51.x;\n    u_xlat16_73 = (-u_xlat16_69) * 0.699999988 + 1.70000005;\n    u_xlat16_69 = u_xlat16_69 * u_xlat16_73;\n    u_xlat16_69 = u_xlat16_69 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_69);\n    u_xlat16_69 = u_xlat16_0.w + -1.0;\n    u_xlat16_69 = unity_SpecCube0_HDR.w * u_xlat16_69 + 1.0;\n    u_xlat16_69 = max(u_xlat16_69, 0.0);\n    u_xlat16_69 = log2(u_xlat16_69);\n    u_xlat16_69 = u_xlat16_69 * unity_SpecCube0_HDR.y;\n    u_xlat16_69 = exp2(u_xlat16_69);\n    u_xlat16_69 = u_xlat16_69 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_69);\n    u_xlat16_10.xy = vec2(u_xlat16_71) * vec2(u_xlat16_71) + vec2(-1.0, 1.0);\n    u_xlat16_69 = float(1.0) / u_xlat16_10.y;\n    u_xlat16_32.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_70);\n    u_xlat16_32.xyz = u_xlat16_51.xxx * u_xlat16_32.xyz + u_xlat16_6.xyz;\n    u_xlat21.xyz = vec3(u_xlat16_69) * u_xlat16_32.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat21.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_9.xyz;\n    u_xlat68 = u_xlat16_29.x * unity_LightData.z;\n    u_xlat16_69 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_69 = clamp(u_xlat16_69, 0.0, 1.0);\n    u_xlat16_69 = u_xlat68 * u_xlat16_69;\n    u_xlat16_29.xyz = vec3(u_xlat16_69) * _MainLightColor.xyz;\n    u_xlat21.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat68 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlat68 = max(u_xlat68, 1.17549435e-38);\n    u_xlat68 = inversesqrt(u_xlat68);\n    u_xlat21.xyz = vec3(u_xlat68) * u_xlat21.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat21.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat24 = dot(_MainLightPosition.xyz, u_xlat21.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x + 1.00001001;\n    u_xlat16_3.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat24 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat2.x = u_xlat24 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_7 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_72 / u_xlat2.x;\n    u_xlat16_3.x = u_xlat2.x + -6.10351562e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xxx + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_29.xyz + u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb2 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb2) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump float u_xlat16_7;\nbool u_xlatb7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat17;\nmediump float u_xlat16_17;\nbool u_xlatb17;\nmediump vec2 u_xlat16_20;\nmediump vec2 u_xlat16_21;\nmediump vec2 u_xlat16_22;\nmediump float u_xlat16_27;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nfloat u_xlat37;\nmediump float u_xlat16_37;\nbool u_xlatb37;\nvoid main()\n{\n    u_xlat16_0.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_0.xy = floor(u_xlat16_0.xy);\n    u_xlat16_20.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_0.xy);\n    u_xlat16_1.xy = (-u_xlat16_20.xy) + vec2(1.0, 1.0);\n    u_xlat16_21.xy = min(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_1.xy = (-u_xlat16_21.xy) * u_xlat16_21.xy + u_xlat16_1.xy;\n    u_xlat16_1.xy = u_xlat16_1.xy + vec2(2.0, 2.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_2.y = u_xlat16_1.x;\n    u_xlat16_3.xy = max(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_4 = u_xlat16_20.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_4.yw;\n    u_xlat16_4 = u_xlat16_4.xxzz * u_xlat16_4.xxzz;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(2.0, 2.0);\n    u_xlat16_5.z = u_xlat16_3.x * 0.0816320032;\n    u_xlat16_3.z = u_xlat16_3.y * 0.0816320032;\n    u_xlat16_4.xz = u_xlat16_4.xz * vec2(0.5, 0.5) + (-u_xlat16_20.xy);\n    u_xlat16_2.zw = u_xlat16_4.wy * vec2(0.0408160016, 0.0408160016);\n    u_xlat16_3.xy = u_xlat16_4.zx * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_5.x = u_xlat16_3.y;\n    u_xlat16_1.w = u_xlat16_2.z;\n    u_xlat16_5.yw = u_xlat16_20.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_2.xz = u_xlat16_20.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_4 = u_xlat16_2 + u_xlat16_5;\n    u_xlat16_2 = u_xlat16_2 / u_xlat16_4;\n    u_xlat16_2 = u_xlat16_2 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_2 = u_xlat16_2.wxyz * _MainLightShadowmapSize.xxxx;\n    u_xlat16_5.xzw = u_xlat16_2.yzw;\n    u_xlat16_3.yw = u_xlat16_20.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_1.xz = u_xlat16_20.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_3 = u_xlat16_1 + u_xlat16_3;\n    u_xlat16_1 = u_xlat16_1 / u_xlat16_3;\n    u_xlat16_1 = u_xlat16_1 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_1 = u_xlat16_1.xwyz * _MainLightShadowmapSize.yyyy;\n    u_xlat16_5.y = u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    vec3 txVec0 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_7 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat16_6 = u_xlat16_3.xxxx * u_xlat16_4;\n    u_xlat7.x = u_xlat16_7 * u_xlat16_6.y;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    u_xlat16_2.y = u_xlat16_5.y;\n    vec3 txVec2 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_5.y = u_xlat16_1.z;\n    u_xlat16_2.z = u_xlat16_5.y;\n    u_xlat16_8 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_2.xyxz;\n    vec3 txVec3 = vec3(u_xlat16_8.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_8.zw,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    vec3 txVec5 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_37 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    vec3 txVec7 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    u_xlat16_6 = u_xlat16_3.yyyy * u_xlat16_4;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_37 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.y * u_xlat16_9 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_17 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_27 + u_xlat7.x;\n    u_xlat16_5.y = u_xlat16_1.w;\n    u_xlat16_6 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    vec3 txVec8 = vec3(u_xlat16_6.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    vec3 txVec9 = vec3(u_xlat16_6.zw,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n    u_xlat16_6 = u_xlat16_3.zzzz * u_xlat16_4;\n    u_xlat16_3 = u_xlat16_3.wwww * u_xlat16_4;\n    u_xlat7.x = u_xlat16_6.x * u_xlat16_17 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.y * u_xlat16_27 + u_xlat7.x;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_5.wy;\n    u_xlat16_1.xzw = u_xlat16_5.xzw;\n    u_xlat16_2.w = u_xlat16_5.y;\n    u_xlat16_22.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_2.xw;\n    vec3 txVec10 = vec3(u_xlat16_22.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n    vec3 txVec11 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n    u_xlat7.x = u_xlat16_6.z * u_xlat16_27 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_6.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_4 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_1.xyzy;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_1.wy;\n    u_xlat16_2.y = u_xlat16_1.y;\n    u_xlat16_0.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_2.xy;\n    vec3 txVec12 = vec3(u_xlat16_0.xy,vs_TEXCOORD6.z);\n    u_xlat16_17 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n    vec3 txVec13 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n    vec3 txVec14 = vec3(u_xlat16_4.xy,vs_TEXCOORD6.z);\n    u_xlat16_37 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n    vec3 txVec15 = vec3(u_xlat16_4.zw,vs_TEXCOORD6.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n    u_xlat7.x = u_xlat16_3.x * u_xlat16_37 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.y * u_xlat16_9 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.z * u_xlat16_27 + u_xlat7.x;\n    u_xlat7.x = u_xlat16_3.w * u_xlat16_17 + u_xlat7.x;\n    u_xlat16_0.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_0.x = u_xlat7.x * _MainLightShadowParams.x + u_xlat16_0.x;\n    u_xlatb7 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb17 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb7 = u_xlatb17 || u_xlatb7;\n    u_xlat16_0.x = (u_xlatb7) ? 1.0 : u_xlat16_0.x;\n    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat7.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat7.x = u_xlat7.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat16_0.x = u_xlat7.x * u_xlat16_10 + u_xlat16_0.x;\n    u_xlat7.x = u_xlat16_0.x * unity_LightData.z;\n    u_xlat17 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat0.xyz = vec3(u_xlat17) * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat7.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_31 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_31 = u_xlat0.x * u_xlat0.x + (-u_xlat16_31);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_2.xyz = unity_SHC.xyz * vec3(u_xlat16_31) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_31 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_31) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_31 * u_xlat16_32;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = max(u_xlat16_31, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;\n    u_xlatb37 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb37) ? u_xlat7.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb37) ? u_xlat7.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb37) ? u_xlat7.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_33 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_3.xyz);\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat16_4.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat7.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_13.x = (-u_xlat16_3.x) + _Smoothness;\n    u_xlat16_13.x = u_xlat16_13.x + 1.0;\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_4 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_4 = u_xlat16_4 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = u_xlat16_13.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_13.xyz = vec3(u_xlat16_32) * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_31) * vec2(u_xlat16_31) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_13.xyz * vec3(u_xlat16_32);\n    u_xlat16_13.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat16_13.xyz;\n    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat37 = max(u_xlat37, 1.17549435e-38);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;\n    u_xlat37 = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat7.x = dot(_MainLightPosition.xyz, u_xlat7.xyz);\n    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat7.x * u_xlat7.x;\n    u_xlat7.x = max(u_xlat16_32, 0.100000001);\n    u_xlat17 = u_xlat37 * u_xlat37;\n    u_xlat17 = u_xlat17 * u_xlat16_8.x + 1.00001001;\n    u_xlat17 = u_xlat17 * u_xlat17;\n    u_xlat7.x = u_xlat7.x * u_xlat17;\n    u_xlat16_32 = u_xlat16_31 * 4.0 + 2.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat7.x = u_xlat16_32 * u_xlat7.x;\n    u_xlat7.x = u_xlat16_31 / u_xlat7.x;\n    u_xlat16_31 = u_xlat7.x + -6.10351562e-05;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = min(u_xlat16_31, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_6.xyz * vec3(u_xlat16_31) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_4, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb7 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb7) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nbool u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump vec4 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_30;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_30 = u_xlat16_2.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_30);\n    u_xlat16_30 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_30) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_21) + (-u_xlat16_6.xyz);\n    u_xlat16_3.xzw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_3.xzw * vec3(u_xlat16_32);\n    u_xlat16_3.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_12) * u_xlat16_2.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_5.xyz + u_xlat16_3.xzw;\n    u_xlat3 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset0;\n    vec3 txVec0 = vec3(u_xlat3.xy,vs_TEXCOORD6.z);\n    u_xlat16_8.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat3.zw,vs_TEXCOORD6.z);\n    u_xlat16_8.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat3 = vs_TEXCOORD6.xyxy + _MainLightShadowOffset1;\n    vec3 txVec2 = vec3(u_xlat3.xy,vs_TEXCOORD6.z);\n    u_xlat16_8.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    vec3 txVec3 = vec3(u_xlat3.zw,vs_TEXCOORD6.z);\n    u_xlat16_8.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    u_xlat16_32 = dot(u_xlat16_8, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_33 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * _MainLightShadowParams.x + u_xlat16_33;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb31 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb31;\n    u_xlat16_32 = (u_xlatb27) ? 1.0 : u_xlat16_32;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_33 + u_xlat16_32;\n    u_xlat27 = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_32 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_32 = u_xlat27 * u_xlat16_32;\n    u_xlat16_16.xyz = vec3(u_xlat16_32) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat4.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_32 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_32, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_32 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_32;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351562e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 1000.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_16.xyz + u_xlat16_1.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_2, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb4 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb4) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump float u_xlat16_6;\nbool u_xlatb6;\nmediump vec4 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nmediump float u_xlat16_16;\nbool u_xlatb16;\nmediump vec2 u_xlat16_20;\nmediump vec2 u_xlat16_21;\nfloat u_xlat26;\nmediump float u_xlat16_26;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nfloat u_xlat36;\nmediump float u_xlat16_36;\nbool u_xlatb36;\nvoid main()\n{\n    u_xlat16_0.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_0.xy = floor(u_xlat16_0.xy);\n    u_xlat16_20.xy = vs_TEXCOORD6.xy * _MainLightShadowmapSize.zw + (-u_xlat16_0.xy);\n    u_xlat16_1.xy = min(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_21.xy = (-u_xlat16_20.xy) + vec2(1.0, 1.0);\n    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat16_1.xy + u_xlat16_21.xy;\n    u_xlat16_2.xy = u_xlat16_21.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_1.xy = u_xlat16_1.xy + vec2(1.0, 1.0);\n    u_xlat16_1.xy = u_xlat16_1.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.xy = max(u_xlat16_20.xy, vec2(0.0, 0.0));\n    u_xlat16_4 = u_xlat16_20.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_4.yw;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_5 = u_xlat16_4.xxzz * u_xlat16_4.xxzz;\n    u_xlat16_4.xy = u_xlat16_4.yw * vec2(0.159999996, 0.159999996);\n    u_xlat16_20.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_20.xy);\n    u_xlat16_2.zw = u_xlat16_5.wy * vec2(0.0799999982, 0.0799999982);\n    u_xlat16_5.xy = u_xlat16_20.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_1.z = u_xlat16_5.y;\n    u_xlat16_1.w = u_xlat16_4.y;\n    u_xlat16_5.w = u_xlat16_4.x;\n    u_xlat16_3.zw = u_xlat16_2.yz;\n    u_xlat16_11.xyz = u_xlat16_1.zyw + u_xlat16_3.zyw;\n    u_xlat16_5.z = u_xlat16_1.x;\n    u_xlat16_13.xyz = u_xlat16_3.zyw / u_xlat16_11.xyz;\n    u_xlat16_2.z = u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_13.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _MainLightShadowmapSize.yyy;\n    u_xlat16_4.w = u_xlat16_3.x;\n    u_xlat16_5 = u_xlat16_2.zwxz + u_xlat16_5.zwxz;\n    u_xlat16_2.xyz = u_xlat16_2.xzw / u_xlat16_5.zwy;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_4.xyz = u_xlat16_2.yxz * _MainLightShadowmapSize.xxx;\n    u_xlat16_2 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.ywxw;\n    u_xlat16_20.xy = u_xlat16_0.xy * _MainLightShadowmapSize.xy + u_xlat16_4.zw;\n    vec3 txVec0 = vec3(u_xlat16_20.xy,vs_TEXCOORD6.z);\n    u_xlat16_6 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_2.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    vec3 txVec2 = vec3(u_xlat16_2.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat16_2 = u_xlat16_11.xxxy * u_xlat16_5.zwyz;\n    u_xlat26 = u_xlat16_26 * u_xlat16_2.y;\n    u_xlat16 = u_xlat16_2.x * u_xlat16_16 + u_xlat26;\n    u_xlat6.x = u_xlat16_2.z * u_xlat16_6 + u_xlat16;\n    u_xlat16_3.w = u_xlat16_4.y;\n    u_xlat16_7 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_3.wywz;\n    u_xlat16_4.yw = u_xlat16_3.yz;\n    vec3 txVec3 = vec3(u_xlat16_7.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_7.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat6.x = u_xlat16_2.w * u_xlat16_16 + u_xlat6.x;\n    u_xlat16_2 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.xyzy;\n    u_xlat16_0 = u_xlat16_0.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.xwzw;\n    vec3 txVec5 = vec3(u_xlat16_2.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_2.zw,vs_TEXCOORD6.z);\n    u_xlat16_36 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    u_xlat16_2 = u_xlat16_11.yyzz * u_xlat16_5;\n    u_xlat16_1.x = u_xlat16_11.z * u_xlat16_5.y;\n    u_xlat6.x = u_xlat16_2.x * u_xlat16_16 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_2.y * u_xlat16_36 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_2.z * u_xlat16_26 + u_xlat6.x;\n    vec3 txVec7 = vec3(u_xlat16_0.xy,vs_TEXCOORD6.z);\n    u_xlat16_16 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    vec3 txVec8 = vec3(u_xlat16_0.zw,vs_TEXCOORD6.z);\n    u_xlat16_26 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    u_xlat6.x = u_xlat16_2.w * u_xlat16_16 + u_xlat6.x;\n    u_xlat6.x = u_xlat16_1.x * u_xlat16_26 + u_xlat6.x;\n    u_xlat16_0.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_0.x = u_xlat6.x * _MainLightShadowParams.x + u_xlat16_0.x;\n    u_xlatb6 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb16 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb6 = u_xlatb16 || u_xlatb6;\n    u_xlat16_0.x = (u_xlatb6) ? 1.0 : u_xlat16_0.x;\n    u_xlat16_10 = (-u_xlat16_0.x) + 1.0;\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat6.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat6.x = u_xlat6.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_0.x = u_xlat6.x * u_xlat16_10 + u_xlat16_0.x;\n    u_xlat6.x = u_xlat16_0.x * unity_LightData.z;\n    u_xlat16 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat0.xyz = vec3(u_xlat16) * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat6.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_31 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_31 = u_xlat0.x * u_xlat0.x + (-u_xlat16_31);\n    u_xlat16_2 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_2.xyz = unity_SHC.xyz * vec3(u_xlat16_31) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_31 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_31) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_31 * u_xlat16_32;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = max(u_xlat16_31, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlatb36 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb36) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb36) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb36) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_33 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_33)) + (-u_xlat16_3.xyz);\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat16_4.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat6.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_3.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_13.x = (-u_xlat16_3.x) + _Smoothness;\n    u_xlat16_13.x = u_xlat16_13.x + 1.0;\n    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);\n    u_xlat16_4 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat16_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_4 = u_xlat16_4 * _BaseColor;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = u_xlat16_13.xxx + (-u_xlat16_7.xyz);\n    u_xlat16_13.xyz = vec3(u_xlat16_32) * u_xlat16_13.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_31) * vec2(u_xlat16_31) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_13.xyz * vec3(u_xlat16_32);\n    u_xlat16_13.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xxx * u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat16_13.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat36 = max(u_xlat36, 1.17549435e-38);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat6.xyz = vec3(u_xlat36) * u_xlat6.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat6.x = dot(_MainLightPosition.xyz, u_xlat6.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat6.x * u_xlat6.x;\n    u_xlat6.x = max(u_xlat16_32, 0.100000001);\n    u_xlat16 = u_xlat36 * u_xlat36;\n    u_xlat16 = u_xlat16 * u_xlat16_8.x + 1.00001001;\n    u_xlat16 = u_xlat16 * u_xlat16;\n    u_xlat6.x = u_xlat6.x * u_xlat16;\n    u_xlat16_32 = u_xlat16_31 * 4.0 + 2.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat6.x = u_xlat16_32 * u_xlat6.x;\n    u_xlat6.x = u_xlat16_31 / u_xlat6.x;\n    u_xlat16_31 = u_xlat6.x + -6.10351562e-05;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = min(u_xlat16_31, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_1.xyz + u_xlat16_2.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat16_0 = min(u_xlat16_4, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb6 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb6) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nbvec4 u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec4 u_xlat16_14;\nmediump vec4 u_xlat16_15;\nmediump vec4 u_xlat16_16;\nmediump vec4 u_xlat16_17;\nmediump vec2 u_xlat16_18;\nmediump vec2 u_xlat16_19;\nmediump vec4 u_xlat16_20;\nfloat u_xlat23;\nfloat u_xlat32;\nmediump vec3 u_xlat16_32;\nmediump vec3 u_xlat16_34;\nmediump vec2 u_xlat16_53;\nmediump vec2 u_xlat16_54;\nmediump vec2 u_xlat16_55;\nmediump vec2 u_xlat16_56;\nmediump vec2 u_xlat16_60;\nfloat u_xlat63;\nint u_xlati63;\nuint u_xlatu63;\nbool u_xlatb63;\nfloat u_xlat65;\nmediump float u_xlat16_65;\nbool u_xlatb65;\nmediump float u_xlat16_66;\nfloat u_xlat67;\nmediump float u_xlat16_67;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n    u_xlatb63 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat65 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat65 = inversesqrt(u_xlat65);\n    u_xlat2.xyz = vec3(u_xlat65) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb63) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb63) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb63) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat63 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat63 = inversesqrt(u_xlat63);\n    u_xlat2.xyz = vec3(u_xlat63) * vs_TEXCOORD2.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);\n    u_xlat16_8.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.xyz = u_xlat16_5.yzw + u_xlat16_8.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_66 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_66 = (-u_xlat16_66) + 4.0;\n    u_xlatu63 = uint(u_xlat16_66);\n    u_xlati63 = int(int(u_xlatu63) << (2 & int(0x1F)));\n    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 1)].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati63].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 3)].xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_5);\n    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_5);\n    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_5);\n    u_xlat16_66 = u_xlat2.y * u_xlat2.y;\n    u_xlat16_66 = u_xlat2.x * u_xlat2.x + (-u_xlat16_66);\n    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_66) + u_xlat16_9.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_66 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_71 = (-u_xlat16_66) + _Smoothness;\n    u_xlat16_9.xyz = u_xlat16_1.xyz * vec3(u_xlat16_66);\n    u_xlat16_10.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_66 = (-_Smoothness) + 1.0;\n    u_xlat16_72 = u_xlat16_66 * u_xlat16_66;\n    u_xlat16_72 = max(u_xlat16_72, 0.0078125);\n    u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n    u_xlat16_71 = u_xlat16_71 + 1.0;\n    u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_72 * 4.0 + 2.0;\n    u_xlatb0 = 0.0<_MainLightShadowParams.y;\n    if(u_xlatb0){\n        u_xlatb0 = _MainLightShadowParams.y==1.0;\n        if(u_xlatb0){\n            u_xlat0 = u_xlat4.xyxy + _MainLightShadowOffset0;\n            vec3 txVec0 = vec3(u_xlat0.xy,u_xlat4.z);\n            u_xlat16_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n            vec3 txVec1 = vec3(u_xlat0.zw,u_xlat4.z);\n            u_xlat16_5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n            u_xlat0 = u_xlat4.xyxy + _MainLightShadowOffset1;\n            vec3 txVec2 = vec3(u_xlat0.xy,u_xlat4.z);\n            u_xlat16_5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n            vec3 txVec3 = vec3(u_xlat0.zw,u_xlat4.z);\n            u_xlat16_5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n            u_xlat16_32.x = dot(u_xlat16_5, vec4(0.25, 0.25, 0.25, 0.25));\n        } else {\n            u_xlatb0 = _MainLightShadowParams.y==2.0;\n            if(u_xlatb0){\n                u_xlat16_53.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_53.xy = floor(u_xlat16_53.xy);\n                u_xlat16_12.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + (-u_xlat16_53.xy);\n                u_xlat16_0 = u_xlat16_12.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_5 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_54.xy = u_xlat16_5.yw * vec2(0.0799999982, 0.0799999982);\n                u_xlat16_13.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_12.xy);\n                u_xlat16_55.xy = (-u_xlat16_12.xy) + vec2(1.0, 1.0);\n                u_xlat16_14.xy = min(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_14.xy = (-u_xlat16_14.xy) * u_xlat16_14.xy + u_xlat16_55.xy;\n                u_xlat16_12.xy = max(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_12.xy = (-u_xlat16_12.xy) * u_xlat16_12.xy + u_xlat16_0.yw;\n                u_xlat16_14.xy = u_xlat16_14.xy + vec2(1.0, 1.0);\n                u_xlat16_12.xy = u_xlat16_12.xy + vec2(1.0, 1.0);\n                u_xlat16_5.xy = u_xlat16_13.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_6.xy = u_xlat16_55.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_7.xy = u_xlat16_14.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_13.xy = u_xlat16_12.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_12.xy = u_xlat16_0.yw * vec2(0.159999996, 0.159999996);\n                u_xlat16_5.z = u_xlat16_7.x;\n                u_xlat16_5.w = u_xlat16_12.x;\n                u_xlat16_6.z = u_xlat16_13.x;\n                u_xlat16_6.w = u_xlat16_54.x;\n                u_xlat16_0 = u_xlat16_5.zwxz + u_xlat16_6.zwxz;\n                u_xlat16_7.z = u_xlat16_5.y;\n                u_xlat16_7.w = u_xlat16_12.y;\n                u_xlat16_13.z = u_xlat16_6.y;\n                u_xlat16_13.w = u_xlat16_54.y;\n                u_xlat16_12.xyz = u_xlat16_7.zyw + u_xlat16_13.zyw;\n                u_xlat16_14.xyz = u_xlat16_6.xzw / u_xlat16_0.zwy;\n                u_xlat16_14.xyz = u_xlat16_14.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_13.xyz = u_xlat16_13.zyw / u_xlat16_12.xyz;\n                u_xlat16_13.xyz = u_xlat16_13.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_5.xyz = u_xlat16_14.yxz * _MainLightShadowmapSize.xxx;\n                u_xlat16_6.xyz = u_xlat16_13.xyz * _MainLightShadowmapSize.yyy;\n                u_xlat16_5.w = u_xlat16_6.x;\n                u_xlat16_7 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.ywxw;\n                u_xlat16_13.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_5.zw;\n                u_xlat16_6.w = u_xlat16_5.y;\n                u_xlat16_5.yw = u_xlat16_6.yz;\n                u_xlat16_14 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n                u_xlat16_6 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.wywz;\n                u_xlat16_5 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xwzw;\n                u_xlat16_15 = u_xlat16_0.zwyz * u_xlat16_12.xxxy;\n                u_xlat16_16 = u_xlat16_0 * u_xlat16_12.yyzz;\n                u_xlat16_53.x = u_xlat16_0.y * u_xlat16_12.z;\n                vec3 txVec4 = vec3(u_xlat16_7.xy,u_xlat4.z);\n                u_xlat16_65 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n                vec3 txVec5 = vec3(u_xlat16_7.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n                u_xlat67 = u_xlat16_67 * u_xlat16_15.y;\n                u_xlat65 = u_xlat16_15.x * u_xlat16_65 + u_xlat67;\n                vec3 txVec6 = vec3(u_xlat16_13.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n                u_xlat65 = u_xlat16_15.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec7 = vec3(u_xlat16_6.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n                u_xlat65 = u_xlat16_15.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec8 = vec3(u_xlat16_14.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n                u_xlat65 = u_xlat16_16.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec9 = vec3(u_xlat16_14.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n                u_xlat65 = u_xlat16_16.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec10 = vec3(u_xlat16_6.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n                u_xlat65 = u_xlat16_16.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec11 = vec3(u_xlat16_5.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n                u_xlat65 = u_xlat16_16.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec12 = vec3(u_xlat16_5.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n                u_xlat32 = u_xlat16_53.x * u_xlat16_67 + u_xlat65;\n                u_xlat16_32.x = u_xlat32;\n            } else {\n                u_xlat16_53.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_53.xy = floor(u_xlat16_53.xy);\n                u_xlat16_12.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + (-u_xlat16_53.xy);\n                u_xlat16_0 = u_xlat16_12.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_5 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_6.yw = u_xlat16_5.yw * vec2(0.0408160016, 0.0408160016);\n                u_xlat16_54.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_12.xy);\n                u_xlat16_13.xy = (-u_xlat16_12.xy) + vec2(1.0, 1.0);\n                u_xlat16_55.xy = min(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_13.xy = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_13.xy;\n                u_xlat16_55.xy = max(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_13.zw = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_0.yw;\n                u_xlat16_13 = u_xlat16_13 + vec4(2.0, 2.0, 2.0, 2.0);\n                u_xlat16_0.z = u_xlat16_13.z * 0.0816320032;\n                u_xlat16_5.xy = u_xlat16_54.yx * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_54.xy = u_xlat16_13.xy * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_5.z = u_xlat16_13.w * 0.0816320032;\n                u_xlat16_0.x = u_xlat16_5.y;\n                u_xlat16_0.yw = u_xlat16_12.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_7.xz = u_xlat16_12.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_7.y = u_xlat16_54.x;\n                u_xlat16_7.w = u_xlat16_6.y;\n                u_xlat16_0 = u_xlat16_0 + u_xlat16_7;\n                u_xlat16_5.yw = u_xlat16_12.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_6.xz = u_xlat16_12.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_6.y = u_xlat16_54.y;\n                u_xlat16_5 = u_xlat16_5 + u_xlat16_6;\n                u_xlat16_7 = u_xlat16_7 / u_xlat16_0;\n                u_xlat16_7 = u_xlat16_7 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_6 = u_xlat16_6 / u_xlat16_5;\n                u_xlat16_6 = u_xlat16_6 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_7 = u_xlat16_7.wxyz * _MainLightShadowmapSize.xxxx;\n                u_xlat16_6 = u_xlat16_6.xwyz * _MainLightShadowmapSize.yyyy;\n                u_xlat16_12.xzw = u_xlat16_7.yzw;\n                u_xlat16_12.y = u_xlat16_6.x;\n                u_xlat16_13 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_14.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.y = u_xlat16_12.y;\n                u_xlat16_12.y = u_xlat16_6.z;\n                u_xlat16_15 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_56.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.z = u_xlat16_12.y;\n                u_xlat16_16 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_7.xyxz;\n                u_xlat16_12.y = u_xlat16_6.w;\n                u_xlat16_17 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_18.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.w = u_xlat16_12.y;\n                u_xlat16_60.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_7.xw;\n                u_xlat16_6.xzw = u_xlat16_12.xzw;\n                u_xlat16_12 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n                u_xlat16_19.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n                u_xlat16_6.x = u_xlat16_7.x;\n                u_xlat16_53.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_6.xy;\n                u_xlat16_6 = u_xlat16_0 * u_xlat16_5.xxxx;\n                u_xlat16_7 = u_xlat16_0 * u_xlat16_5.yyyy;\n                u_xlat16_20 = u_xlat16_0 * u_xlat16_5.zzzz;\n                u_xlat16_0 = u_xlat16_0 * u_xlat16_5.wwww;\n                vec3 txVec13 = vec3(u_xlat16_13.xy,u_xlat4.z);\n                u_xlat16_65 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n                vec3 txVec14 = vec3(u_xlat16_13.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n                u_xlat67 = u_xlat16_67 * u_xlat16_6.y;\n                u_xlat65 = u_xlat16_6.x * u_xlat16_65 + u_xlat67;\n                vec3 txVec15 = vec3(u_xlat16_14.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n                u_xlat65 = u_xlat16_6.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec16 = vec3(u_xlat16_16.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec16, 0.0);\n                u_xlat65 = u_xlat16_6.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec17 = vec3(u_xlat16_15.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec17, 0.0);\n                u_xlat65 = u_xlat16_7.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec18 = vec3(u_xlat16_15.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec18, 0.0);\n                u_xlat65 = u_xlat16_7.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec19 = vec3(u_xlat16_56.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec19, 0.0);\n                u_xlat65 = u_xlat16_7.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec20 = vec3(u_xlat16_16.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec20, 0.0);\n                u_xlat65 = u_xlat16_7.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec21 = vec3(u_xlat16_17.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec21, 0.0);\n                u_xlat65 = u_xlat16_20.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec22 = vec3(u_xlat16_17.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec22, 0.0);\n                u_xlat65 = u_xlat16_20.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec23 = vec3(u_xlat16_18.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec23, 0.0);\n                u_xlat65 = u_xlat16_20.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec24 = vec3(u_xlat16_60.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec24, 0.0);\n                u_xlat65 = u_xlat16_20.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec25 = vec3(u_xlat16_12.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec25, 0.0);\n                u_xlat65 = u_xlat16_0.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec26 = vec3(u_xlat16_12.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec26, 0.0);\n                u_xlat65 = u_xlat16_0.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec27 = vec3(u_xlat16_19.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec27, 0.0);\n                u_xlat65 = u_xlat16_0.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec28 = vec3(u_xlat16_53.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec28, 0.0);\n                u_xlat32 = u_xlat16_0.w * u_xlat16_67 + u_xlat65;\n                u_xlat16_32.x = u_xlat32;\n            }\n        }\n    } else {\n        vec3 txVec29 = vec3(u_xlat4.xy,u_xlat4.z);\n        u_xlat16_32.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec29, 0.0);\n        u_xlat16_32.x = u_xlat16_32.x;\n    }\n    u_xlat16_53.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32.x = u_xlat16_32.x * _MainLightShadowParams.x + u_xlat16_53.x;\n    u_xlatb65 = 0.0>=u_xlat4.z;\n    u_xlatb4.x = u_xlat4.z>=1.0;\n    u_xlatb65 = u_xlatb65 || u_xlatb4.x;\n    u_xlat16_32.x = (u_xlatb65) ? 1.0 : u_xlat16_32.x;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat65 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat65 = u_xlat65 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n    u_xlat16_53.x = (-u_xlat16_32.x) + 1.0;\n    u_xlat16_32.x = u_xlat65 * u_xlat16_53.x + u_xlat16_32.x;\n    u_xlat16_53.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_53.x = u_xlat16_53.x + u_xlat16_53.x;\n    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_53.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_53.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_53.x = clamp(u_xlat16_53.x, 0.0, 1.0);\n    u_xlat16_53.x = (-u_xlat16_53.x) + 1.0;\n    u_xlat16_53.x = u_xlat16_53.x * u_xlat16_53.x;\n    u_xlat16_53.x = u_xlat16_53.x * u_xlat16_53.x;\n    u_xlat16_74 = (-u_xlat16_66) * 0.699999988 + 1.70000005;\n    u_xlat16_66 = u_xlat16_66 * u_xlat16_74;\n    u_xlat16_66 = u_xlat16_66 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_66);\n    u_xlat16_66 = u_xlat16_0.w + -1.0;\n    u_xlat16_66 = unity_SpecCube0_HDR.w * u_xlat16_66 + 1.0;\n    u_xlat16_66 = max(u_xlat16_66, 0.0);\n    u_xlat16_66 = log2(u_xlat16_66);\n    u_xlat16_66 = u_xlat16_66 * unity_SpecCube0_HDR.y;\n    u_xlat16_66 = exp2(u_xlat16_66);\n    u_xlat16_66 = u_xlat16_66 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat16_0.xyz * vec3(u_xlat16_66);\n    u_xlat16_13.xy = vec2(u_xlat16_72) * vec2(u_xlat16_72) + vec2(-1.0, 1.0);\n    u_xlat16_66 = float(1.0) / u_xlat16_13.y;\n    u_xlat16_34.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_71);\n    u_xlat16_34.xyz = u_xlat16_53.xxx * u_xlat16_34.xyz + u_xlat16_10.xyz;\n    u_xlat4.xyz = vec3(u_xlat16_66) * u_xlat16_34.xyz;\n    u_xlat16_12.xyz = u_xlat4.xyz * u_xlat16_12.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz + u_xlat16_12.xyz;\n    u_xlat65 = u_xlat16_32.x * unity_LightData.z;\n    u_xlat16_66 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_66 = clamp(u_xlat16_66, 0.0, 1.0);\n    u_xlat16_66 = u_xlat65 * u_xlat16_66;\n    u_xlat16_32.xyz = vec3(u_xlat16_66) * _MainLightColor.xyz;\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat65 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat65 = max(u_xlat65, 1.17549435e-38);\n    u_xlat65 = inversesqrt(u_xlat65);\n    u_xlat4.xyz = vec3(u_xlat65) * u_xlat4.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_13.x + 1.00001001;\n    u_xlat16_3.x = u_xlat23 * u_xlat23;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat23 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat2.x = u_xlat23 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_11 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_73 / u_xlat2.x;\n    u_xlat16_3.x = u_xlat2.x + -6.10351562e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_10.xyz * u_xlat16_3.xxx + u_xlat16_9.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz * u_xlat16_32.xyz + u_xlat16_8.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb2 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb2) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_9;\nbool u_xlatb9;\nvec3 u_xlat10;\nvec3 u_xlat12;\nmediump float u_xlat16_12;\nbool u_xlatb12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_20;\nmediump vec2 u_xlat16_24;\nmediump vec2 u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat16_2.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_2.xy = floor(u_xlat16_2.xy);\n    u_xlat16_24.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + (-u_xlat16_2.xy);\n    u_xlat16_3.xy = (-u_xlat16_24.xy) + vec2(1.0, 1.0);\n    u_xlat16_25.xy = min(u_xlat16_24.xy, vec2(0.0, 0.0));\n    u_xlat16_3.xy = (-u_xlat16_25.xy) * u_xlat16_25.xy + u_xlat16_3.xy;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(2.0, 2.0);\n    u_xlat16_0.xy = u_xlat16_3.xy * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_3.y = u_xlat16_0.x;\n    u_xlat16_4.xy = max(u_xlat16_24.xy, vec2(0.0, 0.0));\n    u_xlat16_5 = u_xlat16_24.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_4.xy = (-u_xlat16_4.xy) * u_xlat16_4.xy + u_xlat16_5.yw;\n    u_xlat16_5 = u_xlat16_5.xxzz * u_xlat16_5.xxzz;\n    u_xlat16_4.xy = u_xlat16_4.xy + vec2(2.0, 2.0);\n    u_xlat16_6.z = u_xlat16_4.x * 0.0816320032;\n    u_xlat16_4.z = u_xlat16_4.y * 0.0816320032;\n    u_xlat16_5.xz = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_24.xy);\n    u_xlat16_3.zw = u_xlat16_5.wy * vec2(0.0408160016, 0.0408160016);\n    u_xlat16_4.xy = u_xlat16_5.zx * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_6.x = u_xlat16_4.y;\n    u_xlat16_0.w = u_xlat16_3.z;\n    u_xlat16_6.yw = u_xlat16_24.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_3.xz = u_xlat16_24.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_5 = u_xlat16_3 + u_xlat16_6;\n    u_xlat16_3 = u_xlat16_3 / u_xlat16_5;\n    u_xlat16_3 = u_xlat16_3 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_3 = u_xlat16_3.wxyz * _MainLightShadowmapSize.xxxx;\n    u_xlat16_6.xzw = u_xlat16_3.yzw;\n    u_xlat16_4.yw = u_xlat16_24.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_0.xz = u_xlat16_24.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_4 = u_xlat16_0 + u_xlat16_4;\n    u_xlat16_0 = u_xlat16_0 / u_xlat16_4;\n    u_xlat16_0 = u_xlat16_0 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_0 = u_xlat16_0.xwyz * _MainLightShadowmapSize.yyyy;\n    u_xlat16_6.y = u_xlat16_0.x;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    vec3 txVec0 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat16_7 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat1.x = u_xlat16_1.x * u_xlat16_7.y;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    u_xlat16_3.y = u_xlat16_6.y;\n    vec3 txVec2 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_6.y = u_xlat16_0.z;\n    u_xlat16_3.z = u_xlat16_6.y;\n    u_xlat16_8 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_3.xyxz;\n    vec3 txVec3 = vec3(u_xlat16_8.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_8.zw,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    vec3 txVec5 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    vec3 txVec7 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_20 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    u_xlat16_7 = u_xlat16_4.yyyy * u_xlat16_5;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_9 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.y * u_xlat16_20 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_12 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_34 + u_xlat1.x;\n    u_xlat16_6.y = u_xlat16_0.w;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    vec3 txVec8 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    vec3 txVec9 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n    u_xlat16_7 = u_xlat16_4.zzzz * u_xlat16_5;\n    u_xlat16_4 = u_xlat16_4.wwww * u_xlat16_5;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_12 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.y * u_xlat16_34 + u_xlat1.x;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    u_xlat16_0.xzw = u_xlat16_6.xzw;\n    u_xlat16_3.w = u_xlat16_6.y;\n    u_xlat16_25.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_3.xw;\n    vec3 txVec10 = vec3(u_xlat16_25.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n    vec3 txVec11 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_34 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_5 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_0.xyzy;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_0.wy;\n    u_xlat16_3.y = u_xlat16_0.y;\n    u_xlat16_2.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_3.xy;\n    vec3 txVec12 = vec3(u_xlat16_2.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n    vec3 txVec13 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n    vec3 txVec14 = vec3(u_xlat16_5.xy,u_xlat1.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n    vec3 txVec15 = vec3(u_xlat16_5.zw,u_xlat1.z);\n    u_xlat16_20 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat16_9 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.y * u_xlat16_20 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.z * u_xlat16_34 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb12 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb12 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_13 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_13 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat12.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_35 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_35 = u_xlat0.x * u_xlat0.x + (-u_xlat16_35);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_35) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_35 = (-_Smoothness) + 1.0;\n    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;\n    u_xlat16_36 = u_xlat16_35 * u_xlat16_36;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = max(u_xlat16_35, 0.0078125);\n    u_xlat16_36 = u_xlat16_36 * 6.0;\n    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;\n    u_xlatb42 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb42) ? u_xlat9.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb42) ? u_xlat9.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb42) ? u_xlat9.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_37 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);\n    u_xlat16_36 = u_xlat16_1.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = log2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;\n    u_xlat16_36 = exp2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);\n    u_xlat16_36 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat9.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_36 = (-u_xlat16_36) + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_4.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_15.x = (-u_xlat16_4.x) + _Smoothness;\n    u_xlat16_15.x = u_xlat16_15.x + 1.0;\n    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_15.xyz = u_xlat16_15.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_15.xyz = vec3(u_xlat16_36) * u_xlat16_15.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_35) * vec2(u_xlat16_35) + vec2(-1.0, 1.0);\n    u_xlat16_36 = float(1.0) / u_xlat16_7.y;\n    u_xlat10.xyz = u_xlat16_15.xyz * vec3(u_xlat16_36);\n    u_xlat16_15.xyz = u_xlat16_5.xyz * u_xlat10.xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_15.xyz;\n    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat42 = max(u_xlat42, 1.17549435e-38);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat9.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat9.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_36, 0.100000001);\n    u_xlat20 = u_xlat42 * u_xlat42;\n    u_xlat20 = u_xlat20 * u_xlat16_7.x + 1.00001001;\n    u_xlat20 = u_xlat20 * u_xlat20;\n    u_xlat9.x = u_xlat9.x * u_xlat20;\n    u_xlat16_36 = u_xlat16_35 * 4.0 + 2.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat9.x = u_xlat16_36 * u_xlat9.x;\n    u_xlat9.x = u_xlat16_35 / u_xlat9.x;\n    u_xlat16_35 = u_xlat9.x + -6.10351562e-05;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = min(u_xlat16_35, 1000.0);\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_35) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb9 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb9) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nbool u_xlatb6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat12;\nbool u_xlatb12;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nfloat u_xlat39;\nbool u_xlatb39;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat0 = u_xlat1.xyxy + _MainLightShadowOffset0;\n    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat1.z);\n    u_xlat16_2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat0.zw,u_xlat1.z);\n    u_xlat16_2.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat0 = u_xlat1.xyxy + _MainLightShadowOffset1;\n    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat1.z);\n    u_xlat16_2.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    vec3 txVec3 = vec3(u_xlat0.zw,u_xlat1.z);\n    u_xlat16_2.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    u_xlat16_3.x = dot(u_xlat16_2, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * _MainLightShadowParams.x + u_xlat16_14;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb12 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb12 || u_xlatb1;\n    u_xlat16_3.x = (u_xlatb1) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_14 = (-u_xlat16_3.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_14 + u_xlat16_3.x;\n    u_xlat1.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat12.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat16_36 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_36 = u_xlat0.x * u_xlat0.x + (-u_xlat16_36);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_4.xyz = unity_SHC.xyz * vec3(u_xlat16_36) + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_36 = (-_Smoothness) + 1.0;\n    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;\n    u_xlat16_37 = u_xlat16_36 * u_xlat16_37;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_36 = max(u_xlat16_36, 0.0078125);\n    u_xlat16_37 = u_xlat16_37 * 6.0;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlatb39 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb39) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb39) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb39) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_38 = dot((-u_xlat16_5.xyz), u_xlat0.xyz);\n    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_38)) + (-u_xlat16_5.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);\n    u_xlat16_37 = u_xlat16_1.w + -1.0;\n    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;\n    u_xlat16_37 = max(u_xlat16_37, 0.0);\n    u_xlat16_37 = log2(u_xlat16_37);\n    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.y;\n    u_xlat16_37 = exp2(u_xlat16_37);\n    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_37);\n    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat16_5.xyz);\n    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat6.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_37 = (-u_xlat16_37) + 1.0;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_37) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_36) * vec2(u_xlat16_36) + vec2(-1.0, 1.0);\n    u_xlat16_37 = float(1.0) / u_xlat16_9.y;\n    u_xlat10.xyz = u_xlat16_16.xyz * vec3(u_xlat16_37);\n    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat10.xyz;\n    u_xlat16_7.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 1.17549435e-38);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat6.x = dot(_MainLightPosition.xyz, u_xlat6.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_37 = u_xlat6.x * u_xlat6.x;\n    u_xlat6.x = max(u_xlat16_37, 0.100000001);\n    u_xlat17 = u_xlat39 * u_xlat39;\n    u_xlat17 = u_xlat17 * u_xlat16_9.x + 1.00001001;\n    u_xlat17 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat6.x * u_xlat17;\n    u_xlat16_37 = u_xlat16_36 * 4.0 + 2.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat6.x = u_xlat16_37 * u_xlat6.x;\n    u_xlat6.x = u_xlat16_36 / u_xlat6.x;\n    u_xlat16_36 = u_xlat6.x + -6.10351562e-05;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = min(u_xlat16_36, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;\n    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb6 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb6) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nmediump float u_xlat16_11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat18;\nmediump vec2 u_xlat16_22;\nmediump vec2 u_xlat16_23;\nfloat u_xlat31;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat38;\nbool u_xlatb38;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat16_2.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_2.xy = floor(u_xlat16_2.xy);\n    u_xlat16_22.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + (-u_xlat16_2.xy);\n    u_xlat16_3.xy = min(u_xlat16_22.xy, vec2(0.0, 0.0));\n    u_xlat16_23.xy = (-u_xlat16_22.xy) + vec2(1.0, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_23.xy;\n    u_xlat16_0.xy = u_xlat16_23.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_4.xy = max(u_xlat16_22.xy, vec2(0.0, 0.0));\n    u_xlat16_5 = u_xlat16_22.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_4.xy = (-u_xlat16_4.xy) * u_xlat16_4.xy + u_xlat16_5.yw;\n    u_xlat16_4.xy = u_xlat16_4.xy + vec2(1.0, 1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_6 = u_xlat16_5.xxzz * u_xlat16_5.xxzz;\n    u_xlat16_5.xy = u_xlat16_5.yw * vec2(0.159999996, 0.159999996);\n    u_xlat16_22.xy = u_xlat16_6.xz * vec2(0.5, 0.5) + (-u_xlat16_22.xy);\n    u_xlat16_0.zw = u_xlat16_6.wy * vec2(0.0799999982, 0.0799999982);\n    u_xlat16_6.xy = u_xlat16_22.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.z = u_xlat16_6.y;\n    u_xlat16_3.w = u_xlat16_5.y;\n    u_xlat16_6.w = u_xlat16_5.x;\n    u_xlat16_4.zw = u_xlat16_0.yz;\n    u_xlat16_13.xyz = u_xlat16_3.zyw + u_xlat16_4.zyw;\n    u_xlat16_6.z = u_xlat16_3.x;\n    u_xlat16_14.xyz = u_xlat16_4.zyw / u_xlat16_13.xyz;\n    u_xlat16_0.z = u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_14.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _MainLightShadowmapSize.yyy;\n    u_xlat16_5.w = u_xlat16_4.x;\n    u_xlat16_6 = u_xlat16_0.zwxz + u_xlat16_6.zwxz;\n    u_xlat16_7.xyz = u_xlat16_0.xzw / u_xlat16_6.zwy;\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_5.xyz = u_xlat16_7.yxz * _MainLightShadowmapSize.xxx;\n    u_xlat16_0 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.ywxw;\n    u_xlat16_22.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_5.zw;\n    vec3 txVec0 = vec3(u_xlat16_22.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_0.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    vec3 txVec2 = vec3(u_xlat16_0.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat16_0 = u_xlat16_13.xxxy * u_xlat16_6.zwyz;\n    u_xlat31 = u_xlat16_31 * u_xlat16_0.y;\n    u_xlat11.x = u_xlat16_0.x * u_xlat16_11 + u_xlat31;\n    u_xlat1.x = u_xlat16_0.z * u_xlat16_1.x + u_xlat11.x;\n    u_xlat16_4.w = u_xlat16_5.y;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.wywz;\n    u_xlat16_5.yw = u_xlat16_4.yz;\n    vec3 txVec3 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat16_11 + u_xlat1.x;\n    u_xlat16_0 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    u_xlat16_2 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xwzw;\n    vec3 txVec5 = vec3(u_xlat16_0.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_0.zw,u_xlat1.z);\n    u_xlat16_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    u_xlat16_0 = u_xlat16_13.yyzz * u_xlat16_6;\n    u_xlat16_3.x = u_xlat16_13.z * u_xlat16_6.y;\n    u_xlat1.x = u_xlat16_0.x * u_xlat16_11 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_0.y * u_xlat16_8 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_0.z * u_xlat16_31 + u_xlat1.x;\n    vec3 txVec7 = vec3(u_xlat16_2.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    vec3 txVec8 = vec3(u_xlat16_2.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat16_11 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_3.x * u_xlat16_31 + u_xlat1.x;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_32 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_32 = u_xlat0.x * u_xlat0.x + (-u_xlat16_32);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_33 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_33 = u_xlat16_32 * u_xlat16_33;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_33 = u_xlat16_33 * 6.0;\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;\n    u_xlatb38 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb38) ? u_xlat8.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb38) ? u_xlat8.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb38) ? u_xlat8.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_34 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_34)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_33);\n    u_xlat16_33 = u_xlat16_1.w + -1.0;\n    u_xlat16_33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;\n    u_xlat16_33 = max(u_xlat16_33, 0.0);\n    u_xlat16_33 = log2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.y;\n    u_xlat16_33 = exp2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33);\n    u_xlat16_33 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat8.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_33 = (-u_xlat16_33) + 1.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_4.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_7.y;\n    u_xlat9.xyz = u_xlat16_14.xyz * vec3(u_xlat16_33);\n    u_xlat16_14.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_14.xyz;\n    u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat38 = max(u_xlat38, 1.17549435e-38);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;\n    u_xlat38 = dot(u_xlat0.xyz, u_xlat8.xyz);\n    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);\n    u_xlat8.x = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat8.x * u_xlat8.x;\n    u_xlat8.x = max(u_xlat16_33, 0.100000001);\n    u_xlat18 = u_xlat38 * u_xlat38;\n    u_xlat18 = u_xlat18 * u_xlat16_7.x + 1.00001001;\n    u_xlat18 = u_xlat18 * u_xlat18;\n    u_xlat8.x = u_xlat8.x * u_xlat18;\n    u_xlat16_33 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat8.x = u_xlat16_33 * u_xlat8.x;\n    u_xlat8.x = u_xlat16_32 / u_xlat8.x;\n    u_xlat16_32 = u_xlat8.x + -6.10351562e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 1000.0);\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb8 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb8) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nbvec4 u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec4 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec4 u_xlat16_13;\nmediump vec4 u_xlat16_14;\nmediump vec4 u_xlat16_15;\nmediump vec4 u_xlat16_16;\nmediump vec4 u_xlat16_17;\nmediump vec2 u_xlat16_18;\nmediump vec2 u_xlat16_19;\nmediump vec4 u_xlat16_20;\nfloat u_xlat23;\nfloat u_xlat32;\nmediump vec3 u_xlat16_32;\nmediump vec3 u_xlat16_34;\nmediump vec2 u_xlat16_53;\nmediump vec2 u_xlat16_54;\nmediump vec2 u_xlat16_55;\nmediump vec2 u_xlat16_56;\nmediump vec2 u_xlat16_60;\nfloat u_xlat63;\nint u_xlati63;\nuint u_xlatu63;\nbool u_xlatb63;\nfloat u_xlat65;\nmediump float u_xlat16_65;\nbool u_xlatb65;\nmediump float u_xlat16_66;\nfloat u_xlat67;\nmediump float u_xlat16_67;\nmediump float u_xlat16_71;\nmediump float u_xlat16_72;\nmediump float u_xlat16_73;\nmediump float u_xlat16_74;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0 * _BaseColor;\n    u_xlatb63 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat65 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat65 = inversesqrt(u_xlat65);\n    u_xlat2.xyz = vec3(u_xlat65) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb63) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb63) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb63) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat63 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat63 = inversesqrt(u_xlat63);\n    u_xlat2.xyz = vec3(u_xlat63) * vs_TEXCOORD2.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);\n    u_xlat16_8.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.xyz = u_xlat16_5.yzw + u_xlat16_8.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_66 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_66 = (-u_xlat16_66) + 4.0;\n    u_xlatu63 = uint(u_xlat16_66);\n    u_xlati63 = int(int(u_xlatu63) << (2 & int(0x1F)));\n    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 1)].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati63].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati63 + 3)].xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_8.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_8.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_8.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_5 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_9.x = dot(unity_SHBr, u_xlat16_5);\n    u_xlat16_9.y = dot(unity_SHBg, u_xlat16_5);\n    u_xlat16_9.z = dot(unity_SHBb, u_xlat16_5);\n    u_xlat16_66 = u_xlat2.y * u_xlat2.y;\n    u_xlat16_66 = u_xlat2.x * u_xlat2.x + (-u_xlat16_66);\n    u_xlat16_9.xyz = unity_SHC.xyz * vec3(u_xlat16_66) + u_xlat16_9.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_9.xyz;\n    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_66 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_71 = (-u_xlat16_66) + _Smoothness;\n    u_xlat16_9.xyz = u_xlat16_1.xyz * vec3(u_xlat16_66);\n    u_xlat16_10.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_66 = (-_Smoothness) + 1.0;\n    u_xlat16_72 = u_xlat16_66 * u_xlat16_66;\n    u_xlat16_72 = max(u_xlat16_72, 0.0078125);\n    u_xlat16_73 = u_xlat16_72 * u_xlat16_72;\n    u_xlat16_71 = u_xlat16_71 + 1.0;\n    u_xlat16_71 = clamp(u_xlat16_71, 0.0, 1.0);\n    u_xlat16_11 = u_xlat16_72 * 4.0 + 2.0;\n    u_xlatb0 = 0.0<_MainLightShadowParams.y;\n    if(u_xlatb0){\n        u_xlatb0 = _MainLightShadowParams.y==1.0;\n        if(u_xlatb0){\n            u_xlat0 = u_xlat4.xyxy + _MainLightShadowOffset0;\n            vec3 txVec0 = vec3(u_xlat0.xy,u_xlat4.z);\n            u_xlat16_5.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n            vec3 txVec1 = vec3(u_xlat0.zw,u_xlat4.z);\n            u_xlat16_5.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n            u_xlat0 = u_xlat4.xyxy + _MainLightShadowOffset1;\n            vec3 txVec2 = vec3(u_xlat0.xy,u_xlat4.z);\n            u_xlat16_5.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n            vec3 txVec3 = vec3(u_xlat0.zw,u_xlat4.z);\n            u_xlat16_5.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n            u_xlat16_32.x = dot(u_xlat16_5, vec4(0.25, 0.25, 0.25, 0.25));\n        } else {\n            u_xlatb0 = _MainLightShadowParams.y==2.0;\n            if(u_xlatb0){\n                u_xlat16_53.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_53.xy = floor(u_xlat16_53.xy);\n                u_xlat16_12.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + (-u_xlat16_53.xy);\n                u_xlat16_0 = u_xlat16_12.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_5 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_54.xy = u_xlat16_5.yw * vec2(0.0799999982, 0.0799999982);\n                u_xlat16_13.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_12.xy);\n                u_xlat16_55.xy = (-u_xlat16_12.xy) + vec2(1.0, 1.0);\n                u_xlat16_14.xy = min(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_14.xy = (-u_xlat16_14.xy) * u_xlat16_14.xy + u_xlat16_55.xy;\n                u_xlat16_12.xy = max(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_12.xy = (-u_xlat16_12.xy) * u_xlat16_12.xy + u_xlat16_0.yw;\n                u_xlat16_14.xy = u_xlat16_14.xy + vec2(1.0, 1.0);\n                u_xlat16_12.xy = u_xlat16_12.xy + vec2(1.0, 1.0);\n                u_xlat16_5.xy = u_xlat16_13.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_6.xy = u_xlat16_55.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_7.xy = u_xlat16_14.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_13.xy = u_xlat16_12.xy * vec2(0.159999996, 0.159999996);\n                u_xlat16_12.xy = u_xlat16_0.yw * vec2(0.159999996, 0.159999996);\n                u_xlat16_5.z = u_xlat16_7.x;\n                u_xlat16_5.w = u_xlat16_12.x;\n                u_xlat16_6.z = u_xlat16_13.x;\n                u_xlat16_6.w = u_xlat16_54.x;\n                u_xlat16_0 = u_xlat16_5.zwxz + u_xlat16_6.zwxz;\n                u_xlat16_7.z = u_xlat16_5.y;\n                u_xlat16_7.w = u_xlat16_12.y;\n                u_xlat16_13.z = u_xlat16_6.y;\n                u_xlat16_13.w = u_xlat16_54.y;\n                u_xlat16_12.xyz = u_xlat16_7.zyw + u_xlat16_13.zyw;\n                u_xlat16_14.xyz = u_xlat16_6.xzw / u_xlat16_0.zwy;\n                u_xlat16_14.xyz = u_xlat16_14.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_13.xyz = u_xlat16_13.zyw / u_xlat16_12.xyz;\n                u_xlat16_13.xyz = u_xlat16_13.xyz + vec3(-2.5, -0.5, 1.5);\n                u_xlat16_5.xyz = u_xlat16_14.yxz * _MainLightShadowmapSize.xxx;\n                u_xlat16_6.xyz = u_xlat16_13.xyz * _MainLightShadowmapSize.yyy;\n                u_xlat16_5.w = u_xlat16_6.x;\n                u_xlat16_7 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.ywxw;\n                u_xlat16_13.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_5.zw;\n                u_xlat16_6.w = u_xlat16_5.y;\n                u_xlat16_5.yw = u_xlat16_6.yz;\n                u_xlat16_14 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n                u_xlat16_6 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.wywz;\n                u_xlat16_5 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xwzw;\n                u_xlat16_15 = u_xlat16_0.zwyz * u_xlat16_12.xxxy;\n                u_xlat16_16 = u_xlat16_0 * u_xlat16_12.yyzz;\n                u_xlat16_53.x = u_xlat16_0.y * u_xlat16_12.z;\n                vec3 txVec4 = vec3(u_xlat16_7.xy,u_xlat4.z);\n                u_xlat16_65 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n                vec3 txVec5 = vec3(u_xlat16_7.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n                u_xlat67 = u_xlat16_67 * u_xlat16_15.y;\n                u_xlat65 = u_xlat16_15.x * u_xlat16_65 + u_xlat67;\n                vec3 txVec6 = vec3(u_xlat16_13.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n                u_xlat65 = u_xlat16_15.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec7 = vec3(u_xlat16_6.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n                u_xlat65 = u_xlat16_15.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec8 = vec3(u_xlat16_14.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n                u_xlat65 = u_xlat16_16.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec9 = vec3(u_xlat16_14.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n                u_xlat65 = u_xlat16_16.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec10 = vec3(u_xlat16_6.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n                u_xlat65 = u_xlat16_16.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec11 = vec3(u_xlat16_5.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n                u_xlat65 = u_xlat16_16.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec12 = vec3(u_xlat16_5.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n                u_xlat32 = u_xlat16_53.x * u_xlat16_67 + u_xlat65;\n                u_xlat16_32.x = u_xlat32;\n            } else {\n                u_xlat16_53.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n                u_xlat16_53.xy = floor(u_xlat16_53.xy);\n                u_xlat16_12.xy = u_xlat4.xy * _MainLightShadowmapSize.zw + (-u_xlat16_53.xy);\n                u_xlat16_0 = u_xlat16_12.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n                u_xlat16_5 = u_xlat16_0.xxzz * u_xlat16_0.xxzz;\n                u_xlat16_6.yw = u_xlat16_5.yw * vec2(0.0408160016, 0.0408160016);\n                u_xlat16_54.xy = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_12.xy);\n                u_xlat16_13.xy = (-u_xlat16_12.xy) + vec2(1.0, 1.0);\n                u_xlat16_55.xy = min(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_13.xy = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_13.xy;\n                u_xlat16_55.xy = max(u_xlat16_12.xy, vec2(0.0, 0.0));\n                u_xlat16_13.zw = (-u_xlat16_55.xy) * u_xlat16_55.xy + u_xlat16_0.yw;\n                u_xlat16_13 = u_xlat16_13 + vec4(2.0, 2.0, 2.0, 2.0);\n                u_xlat16_0.z = u_xlat16_13.z * 0.0816320032;\n                u_xlat16_5.xy = u_xlat16_54.yx * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_54.xy = u_xlat16_13.xy * vec2(0.0816320032, 0.0816320032);\n                u_xlat16_5.z = u_xlat16_13.w * 0.0816320032;\n                u_xlat16_0.x = u_xlat16_5.y;\n                u_xlat16_0.yw = u_xlat16_12.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_7.xz = u_xlat16_12.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_7.y = u_xlat16_54.x;\n                u_xlat16_7.w = u_xlat16_6.y;\n                u_xlat16_0 = u_xlat16_0 + u_xlat16_7;\n                u_xlat16_5.yw = u_xlat16_12.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n                u_xlat16_6.xz = u_xlat16_12.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n                u_xlat16_6.y = u_xlat16_54.y;\n                u_xlat16_5 = u_xlat16_5 + u_xlat16_6;\n                u_xlat16_7 = u_xlat16_7 / u_xlat16_0;\n                u_xlat16_7 = u_xlat16_7 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_6 = u_xlat16_6 / u_xlat16_5;\n                u_xlat16_6 = u_xlat16_6 + vec4(-3.5, -1.5, 0.5, 2.5);\n                u_xlat16_7 = u_xlat16_7.wxyz * _MainLightShadowmapSize.xxxx;\n                u_xlat16_6 = u_xlat16_6.xwyz * _MainLightShadowmapSize.yyyy;\n                u_xlat16_12.xzw = u_xlat16_7.yzw;\n                u_xlat16_12.y = u_xlat16_6.x;\n                u_xlat16_13 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_14.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.y = u_xlat16_12.y;\n                u_xlat16_12.y = u_xlat16_6.z;\n                u_xlat16_15 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_56.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.z = u_xlat16_12.y;\n                u_xlat16_16 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_7.xyxz;\n                u_xlat16_12.y = u_xlat16_6.w;\n                u_xlat16_17 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_12.xyzy;\n                u_xlat16_18.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_12.wy;\n                u_xlat16_7.w = u_xlat16_12.y;\n                u_xlat16_60.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_7.xw;\n                u_xlat16_6.xzw = u_xlat16_12.xzw;\n                u_xlat16_12 = u_xlat16_53.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n                u_xlat16_19.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n                u_xlat16_6.x = u_xlat16_7.x;\n                u_xlat16_53.xy = u_xlat16_53.xy * _MainLightShadowmapSize.xy + u_xlat16_6.xy;\n                u_xlat16_6 = u_xlat16_0 * u_xlat16_5.xxxx;\n                u_xlat16_7 = u_xlat16_0 * u_xlat16_5.yyyy;\n                u_xlat16_20 = u_xlat16_0 * u_xlat16_5.zzzz;\n                u_xlat16_0 = u_xlat16_0 * u_xlat16_5.wwww;\n                vec3 txVec13 = vec3(u_xlat16_13.xy,u_xlat4.z);\n                u_xlat16_65 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n                vec3 txVec14 = vec3(u_xlat16_13.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n                u_xlat67 = u_xlat16_67 * u_xlat16_6.y;\n                u_xlat65 = u_xlat16_6.x * u_xlat16_65 + u_xlat67;\n                vec3 txVec15 = vec3(u_xlat16_14.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n                u_xlat65 = u_xlat16_6.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec16 = vec3(u_xlat16_16.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec16, 0.0);\n                u_xlat65 = u_xlat16_6.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec17 = vec3(u_xlat16_15.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec17, 0.0);\n                u_xlat65 = u_xlat16_7.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec18 = vec3(u_xlat16_15.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec18, 0.0);\n                u_xlat65 = u_xlat16_7.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec19 = vec3(u_xlat16_56.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec19, 0.0);\n                u_xlat65 = u_xlat16_7.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec20 = vec3(u_xlat16_16.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec20, 0.0);\n                u_xlat65 = u_xlat16_7.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec21 = vec3(u_xlat16_17.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec21, 0.0);\n                u_xlat65 = u_xlat16_20.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec22 = vec3(u_xlat16_17.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec22, 0.0);\n                u_xlat65 = u_xlat16_20.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec23 = vec3(u_xlat16_18.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec23, 0.0);\n                u_xlat65 = u_xlat16_20.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec24 = vec3(u_xlat16_60.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec24, 0.0);\n                u_xlat65 = u_xlat16_20.w * u_xlat16_67 + u_xlat65;\n                vec3 txVec25 = vec3(u_xlat16_12.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec25, 0.0);\n                u_xlat65 = u_xlat16_0.x * u_xlat16_67 + u_xlat65;\n                vec3 txVec26 = vec3(u_xlat16_12.zw,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec26, 0.0);\n                u_xlat65 = u_xlat16_0.y * u_xlat16_67 + u_xlat65;\n                vec3 txVec27 = vec3(u_xlat16_19.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec27, 0.0);\n                u_xlat65 = u_xlat16_0.z * u_xlat16_67 + u_xlat65;\n                vec3 txVec28 = vec3(u_xlat16_53.xy,u_xlat4.z);\n                u_xlat16_67 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec28, 0.0);\n                u_xlat32 = u_xlat16_0.w * u_xlat16_67 + u_xlat65;\n                u_xlat16_32.x = u_xlat32;\n            }\n        }\n    } else {\n        vec3 txVec29 = vec3(u_xlat4.xy,u_xlat4.z);\n        u_xlat16_32.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec29, 0.0);\n        u_xlat16_32.x = u_xlat16_32.x;\n    }\n    u_xlat16_53.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32.x = u_xlat16_32.x * _MainLightShadowParams.x + u_xlat16_53.x;\n    u_xlatb65 = 0.0>=u_xlat4.z;\n    u_xlatb4.x = u_xlat4.z>=1.0;\n    u_xlatb65 = u_xlatb65 || u_xlatb4.x;\n    u_xlat16_32.x = (u_xlatb65) ? 1.0 : u_xlat16_32.x;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat65 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat65 = u_xlat65 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat65 = clamp(u_xlat65, 0.0, 1.0);\n    u_xlat16_53.x = (-u_xlat16_32.x) + 1.0;\n    u_xlat16_32.x = u_xlat65 * u_xlat16_53.x + u_xlat16_32.x;\n    u_xlat16_53.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_53.x = u_xlat16_53.x + u_xlat16_53.x;\n    u_xlat16_12.xyz = u_xlat2.xyz * (-u_xlat16_53.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_53.x = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_53.x = clamp(u_xlat16_53.x, 0.0, 1.0);\n    u_xlat16_53.x = (-u_xlat16_53.x) + 1.0;\n    u_xlat16_53.x = u_xlat16_53.x * u_xlat16_53.x;\n    u_xlat16_53.x = u_xlat16_53.x * u_xlat16_53.x;\n    u_xlat16_74 = (-u_xlat16_66) * 0.699999988 + 1.70000005;\n    u_xlat16_66 = u_xlat16_66 * u_xlat16_74;\n    u_xlat16_66 = u_xlat16_66 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_66);\n    u_xlat16_66 = u_xlat16_0.w + -1.0;\n    u_xlat16_66 = unity_SpecCube0_HDR.w * u_xlat16_66 + 1.0;\n    u_xlat16_66 = max(u_xlat16_66, 0.0);\n    u_xlat16_66 = log2(u_xlat16_66);\n    u_xlat16_66 = u_xlat16_66 * unity_SpecCube0_HDR.y;\n    u_xlat16_66 = exp2(u_xlat16_66);\n    u_xlat16_66 = u_xlat16_66 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat16_0.xyz * vec3(u_xlat16_66);\n    u_xlat16_13.xy = vec2(u_xlat16_72) * vec2(u_xlat16_72) + vec2(-1.0, 1.0);\n    u_xlat16_66 = float(1.0) / u_xlat16_13.y;\n    u_xlat16_34.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_71);\n    u_xlat16_34.xyz = u_xlat16_53.xxx * u_xlat16_34.xyz + u_xlat16_10.xyz;\n    u_xlat4.xyz = vec3(u_xlat16_66) * u_xlat16_34.xyz;\n    u_xlat16_12.xyz = u_xlat4.xyz * u_xlat16_12.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz + u_xlat16_12.xyz;\n    u_xlat65 = u_xlat16_32.x * unity_LightData.z;\n    u_xlat16_66 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_66 = clamp(u_xlat16_66, 0.0, 1.0);\n    u_xlat16_66 = u_xlat65 * u_xlat16_66;\n    u_xlat16_32.xyz = vec3(u_xlat16_66) * _MainLightColor.xyz;\n    u_xlat4.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat65 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat65 = max(u_xlat65, 1.17549435e-38);\n    u_xlat65 = inversesqrt(u_xlat65);\n    u_xlat4.xyz = vec3(u_xlat65) * u_xlat4.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat23 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_13.x + 1.00001001;\n    u_xlat16_3.x = u_xlat23 * u_xlat23;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat23 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat2.x = u_xlat23 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_11 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_73 / u_xlat2.x;\n    u_xlat16_3.x = u_xlat2.x + -6.10351562e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1000.0);\n    u_xlat16_3.xyz = u_xlat16_10.xyz * u_xlat16_3.xxx + u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_32.xyz + u_xlat16_8.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_9.xyz + u_xlat16_3.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb2 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb2) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nmediump vec4 u_xlat16_8;\nvec3 u_xlat9;\nmediump float u_xlat16_9;\nbool u_xlatb9;\nvec3 u_xlat10;\nvec3 u_xlat12;\nmediump float u_xlat16_12;\nbool u_xlatb12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_15;\nfloat u_xlat20;\nmediump float u_xlat16_20;\nmediump vec2 u_xlat16_24;\nmediump vec2 u_xlat16_25;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nfloat u_xlat42;\nbool u_xlatb42;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat16_2.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_2.xy = floor(u_xlat16_2.xy);\n    u_xlat16_24.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + (-u_xlat16_2.xy);\n    u_xlat16_3.xy = (-u_xlat16_24.xy) + vec2(1.0, 1.0);\n    u_xlat16_25.xy = min(u_xlat16_24.xy, vec2(0.0, 0.0));\n    u_xlat16_3.xy = (-u_xlat16_25.xy) * u_xlat16_25.xy + u_xlat16_3.xy;\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(2.0, 2.0);\n    u_xlat16_0.xy = u_xlat16_3.xy * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_3.y = u_xlat16_0.x;\n    u_xlat16_4.xy = max(u_xlat16_24.xy, vec2(0.0, 0.0));\n    u_xlat16_5 = u_xlat16_24.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_4.xy = (-u_xlat16_4.xy) * u_xlat16_4.xy + u_xlat16_5.yw;\n    u_xlat16_5 = u_xlat16_5.xxzz * u_xlat16_5.xxzz;\n    u_xlat16_4.xy = u_xlat16_4.xy + vec2(2.0, 2.0);\n    u_xlat16_6.z = u_xlat16_4.x * 0.0816320032;\n    u_xlat16_4.z = u_xlat16_4.y * 0.0816320032;\n    u_xlat16_5.xz = u_xlat16_5.xz * vec2(0.5, 0.5) + (-u_xlat16_24.xy);\n    u_xlat16_3.zw = u_xlat16_5.wy * vec2(0.0408160016, 0.0408160016);\n    u_xlat16_4.xy = u_xlat16_5.zx * vec2(0.0816320032, 0.0816320032);\n    u_xlat16_6.x = u_xlat16_4.y;\n    u_xlat16_0.w = u_xlat16_3.z;\n    u_xlat16_6.yw = u_xlat16_24.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_3.xz = u_xlat16_24.xx * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_5 = u_xlat16_3 + u_xlat16_6;\n    u_xlat16_3 = u_xlat16_3 / u_xlat16_5;\n    u_xlat16_3 = u_xlat16_3 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_3 = u_xlat16_3.wxyz * _MainLightShadowmapSize.xxxx;\n    u_xlat16_6.xzw = u_xlat16_3.yzw;\n    u_xlat16_4.yw = u_xlat16_24.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.163264006, 0.0816320032);\n    u_xlat16_0.xz = u_xlat16_24.yy * vec2(-0.0816320032, 0.0816320032) + vec2(0.0816320032, 0.163264006);\n    u_xlat16_4 = u_xlat16_0 + u_xlat16_4;\n    u_xlat16_0 = u_xlat16_0 / u_xlat16_4;\n    u_xlat16_0 = u_xlat16_0 + vec4(-3.5, -1.5, 0.5, 2.5);\n    u_xlat16_0 = u_xlat16_0.xwyz * _MainLightShadowmapSize.yyyy;\n    u_xlat16_6.y = u_xlat16_0.x;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    vec3 txVec0 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat16_7 = u_xlat16_4.xxxx * u_xlat16_5;\n    u_xlat1.x = u_xlat16_1.x * u_xlat16_7.y;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    u_xlat16_3.y = u_xlat16_6.y;\n    vec3 txVec2 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_6.y = u_xlat16_0.z;\n    u_xlat16_3.z = u_xlat16_6.y;\n    u_xlat16_8 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_3.xyxz;\n    vec3 txVec3 = vec3(u_xlat16_8.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_8.zw,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    vec3 txVec5 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    vec3 txVec7 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_20 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    u_xlat16_7 = u_xlat16_4.yyyy * u_xlat16_5;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_9 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.y * u_xlat16_20 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_12 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_34 + u_xlat1.x;\n    u_xlat16_6.y = u_xlat16_0.w;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_6.xyzy;\n    vec3 txVec8 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    vec3 txVec9 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec9, 0.0);\n    u_xlat16_7 = u_xlat16_4.zzzz * u_xlat16_5;\n    u_xlat16_4 = u_xlat16_4.wwww * u_xlat16_5;\n    u_xlat1.x = u_xlat16_7.x * u_xlat16_12 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.y * u_xlat16_34 + u_xlat1.x;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_6.wy;\n    u_xlat16_0.xzw = u_xlat16_6.xzw;\n    u_xlat16_3.w = u_xlat16_6.y;\n    u_xlat16_25.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_3.xw;\n    vec3 txVec10 = vec3(u_xlat16_25.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec10, 0.0);\n    vec3 txVec11 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec11, 0.0);\n    u_xlat1.x = u_xlat16_7.z * u_xlat16_34 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_7.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_5 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_0.xyzy;\n    u_xlat16_24.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_0.wy;\n    u_xlat16_3.y = u_xlat16_0.y;\n    u_xlat16_2.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_3.xy;\n    vec3 txVec12 = vec3(u_xlat16_2.xy,u_xlat1.z);\n    u_xlat16_12 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec12, 0.0);\n    vec3 txVec13 = vec3(u_xlat16_24.xy,u_xlat1.z);\n    u_xlat16_34 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec13, 0.0);\n    vec3 txVec14 = vec3(u_xlat16_5.xy,u_xlat1.z);\n    u_xlat16_9 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec14, 0.0);\n    vec3 txVec15 = vec3(u_xlat16_5.zw,u_xlat1.z);\n    u_xlat16_20 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec15, 0.0);\n    u_xlat1.x = u_xlat16_4.x * u_xlat16_9 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.y * u_xlat16_20 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.z * u_xlat16_34 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_4.w * u_xlat16_12 + u_xlat1.x;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb12 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb12 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_13 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_13 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat12.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_35 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_35 = u_xlat0.x * u_xlat0.x + (-u_xlat16_35);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_35) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_35 = (-_Smoothness) + 1.0;\n    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;\n    u_xlat16_36 = u_xlat16_35 * u_xlat16_36;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = max(u_xlat16_35, 0.0078125);\n    u_xlat16_36 = u_xlat16_36 * 6.0;\n    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;\n    u_xlatb42 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb42) ? u_xlat9.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb42) ? u_xlat9.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb42) ? u_xlat9.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_37 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_37 = u_xlat16_37 + u_xlat16_37;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_37)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_36);\n    u_xlat16_36 = u_xlat16_1.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = log2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;\n    u_xlat16_36 = exp2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);\n    u_xlat16_36 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat9.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_36 = (-u_xlat16_36) + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_4.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_15.x = (-u_xlat16_4.x) + _Smoothness;\n    u_xlat16_15.x = u_xlat16_15.x + 1.0;\n    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_15.xyz = u_xlat16_15.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_15.xyz = vec3(u_xlat16_36) * u_xlat16_15.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_35) * vec2(u_xlat16_35) + vec2(-1.0, 1.0);\n    u_xlat16_36 = float(1.0) / u_xlat16_7.y;\n    u_xlat10.xyz = u_xlat16_15.xyz * vec3(u_xlat16_36);\n    u_xlat16_15.xyz = u_xlat16_5.xyz * u_xlat10.xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_15.xyz;\n    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat42 = max(u_xlat42, 1.17549435e-38);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat9.xyz = vec3(u_xlat42) * u_xlat9.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat9.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat9.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_36, 0.100000001);\n    u_xlat20 = u_xlat42 * u_xlat42;\n    u_xlat20 = u_xlat20 * u_xlat16_7.x + 1.00001001;\n    u_xlat20 = u_xlat20 * u_xlat20;\n    u_xlat9.x = u_xlat9.x * u_xlat20;\n    u_xlat16_36 = u_xlat16_35 * 4.0 + 2.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat9.x = u_xlat16_36 * u_xlat9.x;\n    u_xlat9.x = u_xlat16_35 / u_xlat9.x;\n    u_xlat16_35 = u_xlat9.x + -6.10351562e-05;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = min(u_xlat16_35, 1000.0);\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_35) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb9 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb9) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowOffset0;\nuniform \tvec4 _MainLightShadowOffset1;\nuniform \tvec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nbool u_xlatb6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat10;\nvec3 u_xlat12;\nbool u_xlatb12;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_38;\nfloat u_xlat39;\nbool u_xlatb39;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat0 = u_xlat1.xyxy + _MainLightShadowOffset0;\n    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat1.z);\n    u_xlat16_2.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat0.zw,u_xlat1.z);\n    u_xlat16_2.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    u_xlat0 = u_xlat1.xyxy + _MainLightShadowOffset1;\n    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat1.z);\n    u_xlat16_2.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    vec3 txVec3 = vec3(u_xlat0.zw,u_xlat1.z);\n    u_xlat16_2.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    u_xlat16_3.x = dot(u_xlat16_2, vec4(0.25, 0.25, 0.25, 0.25));\n    u_xlat16_14 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * _MainLightShadowParams.x + u_xlat16_14;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb12 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb12 || u_xlatb1;\n    u_xlat16_3.x = (u_xlatb1) ? 1.0 : u_xlat16_3.x;\n    u_xlat16_14 = (-u_xlat16_3.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_14 + u_xlat16_3.x;\n    u_xlat1.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat12.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat1.x * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat16_36 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_36 = u_xlat0.x * u_xlat0.x + (-u_xlat16_36);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_4.xyz = unity_SHC.xyz * vec3(u_xlat16_36) + u_xlat16_4.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_36 = (-_Smoothness) + 1.0;\n    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;\n    u_xlat16_37 = u_xlat16_36 * u_xlat16_37;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_36 = max(u_xlat16_36, 0.0078125);\n    u_xlat16_37 = u_xlat16_37 * 6.0;\n    u_xlat6.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlatb39 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb39) ? u_xlat6.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb39) ? u_xlat6.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb39) ? u_xlat6.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_38 = dot((-u_xlat16_5.xyz), u_xlat0.xyz);\n    u_xlat16_38 = u_xlat16_38 + u_xlat16_38;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_38)) + (-u_xlat16_5.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_37);\n    u_xlat16_37 = u_xlat16_1.w + -1.0;\n    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;\n    u_xlat16_37 = max(u_xlat16_37, 0.0);\n    u_xlat16_37 = log2(u_xlat16_37);\n    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.y;\n    u_xlat16_37 = exp2(u_xlat16_37);\n    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_37);\n    u_xlat16_37 = dot(u_xlat0.xyz, u_xlat16_5.xyz);\n    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat6.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_37 = (-u_xlat16_37) + 1.0;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_37 = u_xlat16_37 * u_xlat16_37;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_37) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_36) * vec2(u_xlat16_36) + vec2(-1.0, 1.0);\n    u_xlat16_37 = float(1.0) / u_xlat16_9.y;\n    u_xlat10.xyz = u_xlat16_16.xyz * vec3(u_xlat16_37);\n    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat10.xyz;\n    u_xlat16_7.xyz = u_xlat16_5.xxx * u_xlat16_1.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat39 = max(u_xlat39, 1.17549435e-38);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat6.xyz = vec3(u_xlat39) * u_xlat6.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat6.xyz);\n    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);\n    u_xlat6.x = dot(_MainLightPosition.xyz, u_xlat6.xyz);\n    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);\n    u_xlat16_37 = u_xlat6.x * u_xlat6.x;\n    u_xlat6.x = max(u_xlat16_37, 0.100000001);\n    u_xlat17 = u_xlat39 * u_xlat39;\n    u_xlat17 = u_xlat17 * u_xlat16_9.x + 1.00001001;\n    u_xlat17 = u_xlat17 * u_xlat17;\n    u_xlat6.x = u_xlat6.x * u_xlat17;\n    u_xlat16_37 = u_xlat16_36 * 4.0 + 2.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;\n    u_xlat6.x = u_xlat16_37 * u_xlat6.x;\n    u_xlat6.x = u_xlat16_36 / u_xlat6.x;\n    u_xlat16_36 = u_xlat6.x + -6.10351562e-05;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = min(u_xlat16_36, 1000.0);\n    u_xlat16_5.xyz = u_xlat16_8.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb6 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb6) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tvec4 _MainLightShadowParams;\nuniform \tvec4 _MainLightShadowmapSize;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4                unity_LightData;\n\tUNITY_UNIFORM mediump vec4                unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4                unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4                unity_SHAr;\n\tUNITY_UNIFORM mediump vec4                unity_SHAg;\n\tUNITY_UNIFORM mediump vec4                unity_SHAb;\n\tUNITY_UNIFORM mediump vec4                unity_SHBr;\n\tUNITY_UNIFORM mediump vec4                unity_SHBg;\n\tUNITY_UNIFORM mediump vec4                unity_SHBb;\n\tUNITY_UNIFORM mediump vec4                unity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4                _BaseMap_ST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedX_DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4                _BaseColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_SpecColor;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedX_EmissionColor;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Cutoff;\n\tUNITY_UNIFORM mediump float                _Smoothness;\n\tUNITY_UNIFORM mediump float                _Metallic;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_BumpScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_Parallax;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_OcclusionStrength;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatMask;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float Xhlslcc_UnusedX_DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float                _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nbool u_xlatb8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nmediump float u_xlat16_11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat18;\nmediump vec2 u_xlat16_22;\nmediump vec2 u_xlat16_23;\nfloat u_xlat31;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nmediump float u_xlat16_34;\nfloat u_xlat38;\nbool u_xlatb38;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << (2 & int(0x1F)));\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlat16_2.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + vec2(0.5, 0.5);\n    u_xlat16_2.xy = floor(u_xlat16_2.xy);\n    u_xlat16_22.xy = u_xlat1.xy * _MainLightShadowmapSize.zw + (-u_xlat16_2.xy);\n    u_xlat16_3.xy = min(u_xlat16_22.xy, vec2(0.0, 0.0));\n    u_xlat16_23.xy = (-u_xlat16_22.xy) + vec2(1.0, 1.0);\n    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat16_3.xy + u_xlat16_23.xy;\n    u_xlat16_0.xy = u_xlat16_23.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);\n    u_xlat16_3.xy = u_xlat16_3.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_4.xy = max(u_xlat16_22.xy, vec2(0.0, 0.0));\n    u_xlat16_5 = u_xlat16_22.xxyy + vec4(0.5, 1.0, 0.5, 1.0);\n    u_xlat16_4.xy = (-u_xlat16_4.xy) * u_xlat16_4.xy + u_xlat16_5.yw;\n    u_xlat16_4.xy = u_xlat16_4.xy + vec2(1.0, 1.0);\n    u_xlat16_4.xy = u_xlat16_4.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_6 = u_xlat16_5.xxzz * u_xlat16_5.xxzz;\n    u_xlat16_5.xy = u_xlat16_5.yw * vec2(0.159999996, 0.159999996);\n    u_xlat16_22.xy = u_xlat16_6.xz * vec2(0.5, 0.5) + (-u_xlat16_22.xy);\n    u_xlat16_0.zw = u_xlat16_6.wy * vec2(0.0799999982, 0.0799999982);\n    u_xlat16_6.xy = u_xlat16_22.xy * vec2(0.159999996, 0.159999996);\n    u_xlat16_3.z = u_xlat16_6.y;\n    u_xlat16_3.w = u_xlat16_5.y;\n    u_xlat16_6.w = u_xlat16_5.x;\n    u_xlat16_4.zw = u_xlat16_0.yz;\n    u_xlat16_13.xyz = u_xlat16_3.zyw + u_xlat16_4.zyw;\n    u_xlat16_6.z = u_xlat16_3.x;\n    u_xlat16_14.xyz = u_xlat16_4.zyw / u_xlat16_13.xyz;\n    u_xlat16_0.z = u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_14.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _MainLightShadowmapSize.yyy;\n    u_xlat16_5.w = u_xlat16_4.x;\n    u_xlat16_6 = u_xlat16_0.zwxz + u_xlat16_6.zwxz;\n    u_xlat16_7.xyz = u_xlat16_0.xzw / u_xlat16_6.zwy;\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vec3(-2.5, -0.5, 1.5);\n    u_xlat16_5.xyz = u_xlat16_7.yxz * _MainLightShadowmapSize.xxx;\n    u_xlat16_0 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.ywxw;\n    u_xlat16_22.xy = u_xlat16_2.xy * _MainLightShadowmapSize.xy + u_xlat16_5.zw;\n    vec3 txVec0 = vec3(u_xlat16_22.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    vec3 txVec1 = vec3(u_xlat16_0.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n    vec3 txVec2 = vec3(u_xlat16_0.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n    u_xlat16_0 = u_xlat16_13.xxxy * u_xlat16_6.zwyz;\n    u_xlat31 = u_xlat16_31 * u_xlat16_0.y;\n    u_xlat11.x = u_xlat16_0.x * u_xlat16_11 + u_xlat31;\n    u_xlat1.x = u_xlat16_0.z * u_xlat16_1.x + u_xlat11.x;\n    u_xlat16_4.w = u_xlat16_5.y;\n    u_xlat16_7 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_4.wywz;\n    u_xlat16_5.yw = u_xlat16_4.yz;\n    vec3 txVec3 = vec3(u_xlat16_7.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n    vec3 txVec4 = vec3(u_xlat16_7.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat16_11 + u_xlat1.x;\n    u_xlat16_0 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xyzy;\n    u_xlat16_2 = u_xlat16_2.xyxy * _MainLightShadowmapSize.xyxy + u_xlat16_5.xwzw;\n    vec3 txVec5 = vec3(u_xlat16_0.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec5, 0.0);\n    vec3 txVec6 = vec3(u_xlat16_0.zw,u_xlat1.z);\n    u_xlat16_8 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec6, 0.0);\n    u_xlat16_0 = u_xlat16_13.yyzz * u_xlat16_6;\n    u_xlat16_3.x = u_xlat16_13.z * u_xlat16_6.y;\n    u_xlat1.x = u_xlat16_0.x * u_xlat16_11 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_0.y * u_xlat16_8 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_0.z * u_xlat16_31 + u_xlat1.x;\n    vec3 txVec7 = vec3(u_xlat16_2.xy,u_xlat1.z);\n    u_xlat16_11 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec7, 0.0);\n    vec3 txVec8 = vec3(u_xlat16_2.zw,u_xlat1.z);\n    u_xlat16_31 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec8, 0.0);\n    u_xlat1.x = u_xlat16_0.w * u_xlat16_11 + u_xlat1.x;\n    u_xlat1.x = u_xlat16_3.x * u_xlat16_31 + u_xlat1.x;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_32 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_32 = u_xlat0.x * u_xlat0.x + (-u_xlat16_32);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_3.xyz = unity_SHC.xyz * vec3(u_xlat16_32) + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_33 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_33 = u_xlat16_32 * u_xlat16_33;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_33 = u_xlat16_33 * 6.0;\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;\n    u_xlatb38 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb38) ? u_xlat8.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb38) ? u_xlat8.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb38) ? u_xlat8.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_34 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_34)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_33);\n    u_xlat16_33 = u_xlat16_1.w + -1.0;\n    u_xlat16_33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;\n    u_xlat16_33 = max(u_xlat16_33, 0.0);\n    u_xlat16_33 = log2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.y;\n    u_xlat16_33 = exp2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_33);\n    u_xlat16_33 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat8.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_33 = (-u_xlat16_33) + 1.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_4.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_4.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_1 = u_xlat16_1 * _BaseColor;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_33) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_7.y;\n    u_xlat9.xyz = u_xlat16_14.xyz * vec3(u_xlat16_33);\n    u_xlat16_14.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat16_1.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_14.xyz;\n    u_xlat38 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat38 = max(u_xlat38, 1.17549435e-38);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;\n    u_xlat38 = dot(u_xlat0.xyz, u_xlat8.xyz);\n    u_xlat38 = clamp(u_xlat38, 0.0, 1.0);\n    u_xlat8.x = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat8.x * u_xlat8.x;\n    u_xlat8.x = max(u_xlat16_33, 0.100000001);\n    u_xlat18 = u_xlat38 * u_xlat38;\n    u_xlat18 = u_xlat18 * u_xlat16_7.x + 1.00001001;\n    u_xlat18 = u_xlat18 * u_xlat18;\n    u_xlat8.x = u_xlat8.x * u_xlat18;\n    u_xlat16_33 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat8.x = u_xlat16_33 * u_xlat8.x;\n    u_xlat8.x = u_xlat16_32 / u_xlat8.x;\n    u_xlat16_32 = u_xlat8.x + -6.10351562e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 1000.0);\n    u_xlat16_4.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    u_xlat16_0 = min(u_xlat16_1, vec4(65504.0, 65504.0, 65504.0, 65504.0));\n    u_xlatb8 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb8) ? u_xlat16_0.w : 1.0;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4                hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LODFade;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightData;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_LightIndices[2];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_LightmapST;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAr;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAg;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHAb;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBr;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBg;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHBb;\n\tUNITY_UNIFORM mediump vec4 Xhlslcc_UnusedXunity_SHC;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Min;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_RendererBounds_Max;\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXhlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 Xhlslcc_UnusedXunity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"]